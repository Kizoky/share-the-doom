class DudeCoreHandler : EventHandler 
{
	int SavedTimes;
	bool SavedTrigger;

	override void WorldUnloaded(WorldEvent e)
	{
		// Don't even mention it.... Spaghetti
		for (uint i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i].mo && Players[i].mo is 'PostalDude')
			{
				let DudePawn = PostalDude(Players[i].mo);
				if (DudePawn)
				{
					DudePawn.A_TakeInventory("PostKick",100);
					DudePawn.Kick = false;
					DudePawn.InitLine = false;
					DudePawn.isinPain = false;
					DudePawn.TimeBeforeNextPainLine = 0;
					DudePawn.A_GiveInventory("HUDViewable",1);
					DudePawn.A_TakeInventory("CameraRunner",1);
					DudePawn.bDONTTHRUST = false;
					DudePawn.Speed = DudePawn.Default.Speed;
					DudePawn.JumpZ = DudePawn.Default.JumpZ;
					if (DudePawn.PlayerData)
					{
						DudePawn.PlayerData.InsultCooldown = 0;
						DudePawn.PlayerData.DudeLineCooldown = 0;
						DudePawn.PlayerData.DudeLineTriggered = false;
						DudePawn.PlayerData.RunningStopCooldown = 0;
						DudePawn.PlayerData.SpawnedOnce = false;
						DudePawn.PlayerData.Suicide = false;
					}
				}
			}
		}
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		Array<actor> NumOfDudes;
		for (uint i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i].mo && Players[i].mo is 'PostalDude')
			{
				NumOfDudes.Push(Players[i].mo);
			}
		}
		
		int Roastee = random[roastee](0,NumOfDudes.Size()-1);
		
		let Roaster = PostalDude(NumOfDudes[Roastee]);
		if (Roaster)
		{
			bool trigorno = random[roastmap](0,1);

			if (trigorno)
			{
				int randomnumber = random[pickline](1,6);
				string Dude_RandomLevel = string.Format("Dude_RandomLevel%i",randomnumber);
				Roaster.A_StartSound(Dude_RandomLevel, CHAN_VOICE, CHANF_NOSTOP);
			}
		}
	}

	override void WorldTick()
	{
		if (gameaction == ga_savegame || gameaction == ga_autosave)
		{
			// Only the host can save (atleast in theory)
			let player = PostalDude(Players[0].mo);
			
			if (!player) return;
			
			if (SavedTimes == 4 && SavedTrigger != true)
			{
				player.A_StartSound("dude_save2", CHAN_VOICE, CHANF_NOSTOP);
				SavedTrigger = true;
			}
			
			if (SavedTimes == 5 && SavedTrigger != true)
			{
				player.A_StartSound("dude_save1", CHAN_VOICE, CHANF_NOSTOP);
				SavedTrigger = true;
			}
			
			if (SavedTimes == 6 && SavedTrigger != true)
			{
				player.A_StartSound("dude_save3", CHAN_VOICE, CHANF_NOSTOP);
				SavedTimes = 0;
				SavedTrigger = true;
			}
			
			SavedTimes++;
			SavedTrigger = false;
		}
	}

	override void NetworkProcess (ConsoleEvent e)
	{
		if (e.Name ~== "Kicking")
		{
			PostalDude p = PostalDude(players[e.Player].mo);
			
			if (!p || !p.PlayerData) return;
			
			if (p.bKILLED || p.SuicideCamera) return;
			
			if (p)
				p.Kick = true;
		}
		
		if (e.Name ~== "Holster")
		{
			PostalDude p = PostalDude(players[e.Player].mo);
			
			if (!p) return;
			
			p.E_Holster();
		}
		
		if (e.Name ~== "Urethra")
		{
			PostalDude p = PostalDude(players[e.Player].mo);
			
			if (!p) return;
			
			p.E_Urethra();
		}
		
		if (e.Name ~== "Suicide")
		{
			PostalDude p = PostalDude(players[e.Player].mo);
			
			if (!p) return;
			
			p.E_Suicide();
		}
		
		if (e.Name ~== "Taunt")
		{
			PostalDude p = PostalDude(players[e.Player].mo);
			
			if (!p) return;
			
			p.E_Taunt();
		}
		
		// for testing purposes only
		if (e.Name ~== "DamageSelf")
		{
			PostalDude p = PostalDude(players[e.Player].mo);
			
			if (!p || !p.PlayerData) return;
			
			if (p)
				p.A_DamageSelf(5);
		}
		
		// Reinvented the wheel
		if (e.Name ~== "DropInventoryItem" || e.Name ~== "DropWeaponItem")
		{
			PostalDude p = PostalDude(players[e.Player].mo);
			
			bool WeaponDrop = false;
			if (e.Name ~== "DropWeaponItem")
				WeaponDrop = true;
			
			p.E_Drop(WeaponDrop);
		}
	  
		// Zoom in or out Suiciding
		// todo: replace this garbage with my Tower Defense mod code
	
		if (e.Name ~== "ZoomSuicide")
		{
			PostalDude p = PostalDude(players[e.Player].mo);
			
			if (!p || !p.PlayerData) return;
			
			if (p.SuicideCamera && p)
			{
				let a = CameraRunner(p.SuicideCamera);
				
				if (a)
				{
					if(e.Args[0] == 0x198)
					{
						if (a.zoomH + 2 >= 100) return;
						
						a.zoomH += 2;
					}
						
					if (e.Args[0] == 0x199)
					{
						if (a.zoomH - 2 <= -80) return;
						
						a.zoomH -= 2;
					}
				}
			}
		}
	}
   
	override void PlayerEntered (PlayerEvent e)
	{
		PostalDude p = PostalDude(players[e.PlayerNumber].mo);
		
		// todo: No, this is not how the Kick should behave and work
		// Make the Kick not remove itself after finishing the kicking animation
		if (p)
		{
			p.A_TakeInventory("PostKick",100);
			p.Kick = false;
			
			if (p.PlayerData)
				p.PlayerData.InsultCooldown = level.time + 35 * 2.5;
			
			return;
		}
		
		PlayerPawn n = PlayerPawn(players[e.PlayerNumber].mo);
		if (n && !p)
		{
			n.A_GiveInventory("HUDViewable",1);
			//n.A_GiveInventory("YouSpinMyHeadRightRoundRightRoundLikeARecordBabyRightRoundRightRound",1);
		}
	}
	
	// Used for initiating Dude's killing spree lines
	// This is universal
	override void WorldThingDied(WorldEvent e)
	{	
		if (e.Inflictor && e.Thing)
		{
			if (!(e.Thing is 'PostalDude'))
			{
				//Is there a way to maybe get the killer and not the target?
				if (e.Thing.target is 'PostalDude')
				{
					actor DudeTarget = null;
					for (uint i = 0; i < MAXPLAYERS; i++)
					{
						if (Players[i].mo)
						{
							if (Players[i].mo == e.Thing.target)
							{
								DudeTarget = Players[i].mo;
								break;
							}
						}
					}
					
					let DudePawn = PostalDude(DudeTarget);
					
					if (DudePawn && !DudePawn.bKILLED)
					{
						let pa = PostalActor(e.Thing);
						if (pa && pa.STD_NoKillLine) return;
						
						if (DudePawn.PlayerData && !DudePawn.PlayerData.DudeLineTriggered && level.time > DudePawn.PlayerData.DudeLineCooldown)
						{
							DudePawn.InitLine = true;
						}
					}
				}
			}
		}
	}
	
	override bool InputProcess (InputEvent e)
	{
		if (e.KeyScan == e.Key_MWheelUp || e.KeyScan == e.Key_MWheelDown)
			SendNetworkEvent("ZoomSuicide", e.KeyScan);
			
		return false;
	}
}
