class DudeCoreHandler : EventHandler 
{
	
	int SavedTimes;
	bool SavedTrigger;
	
   override void NetworkProcess (ConsoleEvent e)
   {	
	  //let vars = PostalVariables(GlobalsContainer.Find("PostalVariables"));
      if (e.Name ~== "Kicking")
	  {
			PostalDude p = PostalDude(players[e.Player].mo);
			PlayerInfo player = players [e.Player];
			
			if (!p || !p.PlayerData) return;
			
			if (p.bKILLED) return;
			if (p.SuicideCamera) return;
			
			//Console.Printf("Q pressed (Mighty Foot Engaged)");
			if (p)
				p.Kick = true;
	  }
	  
	  if (e.Name ~== "Holster")
	  {
			PlayerInfo player = players [e.Player];
			PostalDude p = PostalDude(players[e.Player].mo);
			
			if (p.bKILLED) return;
			if (p == null || p.PlayerData == null) return;
			if (p.SuicideCamera) return;
			
			// There was no holstering, let's save the Weapon we hold
			if (p.PlayerData.Holster == false)
			{
				// no, we don't want to "Holster" our peepee
				// Nor Holster our Hands, Schr√∂dinger would be proud then
				if (p.player.ReadyWeapon == Weapon(p.FindInventory("PostUrethra")) ||
					p.player.ReadyWeapon == Weapon(p.FindInventory("PostHands"))) return;
				
				p.PlayerData.HolsterSave = p.player.ReadyWeapon;
				//Console.Printf("E is pressed (Holster is true)");
				p.Player.PendingWeapon = Weapon(p.FindInventory("PostHands"));
				p.PlayerData.Holster = true;
				return;
			}
			
			if (p.PlayerData.Holster)
			{
				// We are not holding anything, equip the saved weapon
				if (p.Player.ReadyWeapon == Weapon(p.FindInventory("PostHands")))
				{
					p.player.PendingWeapon = p.PlayerData.HolsterSave;
					p.PlayerData.Holster = false;
				}
				else
				{
					// Player decided to select an other weapon while Holstering previously, just save it
					// and select Hands
					p.PlayerData.HolsterSave = p.player.ReadyWeapon;
					p.Player.PendingWeapon = Weapon(p.FindInventory("PostHands"));
				}
			}
	  }

	  if (e.Name ~== "Urethra")
	  {
			PlayerInfo player = players [e.Player];
			PostalDude p = PostalDude(players[e.Player].mo);
			//Console.Printf("R is pressed (Now the flowers will grow)");
			
			//Pretty much it works the same way like Holster
			
			if (p.bKILLED) return;
			if (p == null || p.PlayerData == null) return;
			if (p.SuicideCamera) return;
			
			if (p.PlayerData.Urethra == false)
			{
				// A glitch in the matrix
				if (p.player.ReadyWeapon == Weapon(p.FindInventory("PostUrethra"))) return;
				
				p.A_StartSound("piss/zipperdown", CHAN_BODY);
				p.PlayerData.HolsterSave = p.player.ReadyWeapon;
				//Console.Printf("E is pressed (Holster is true)");
				p.Player.PendingWeapon = Weapon(p.FindInventory("PostUrethra"));
				p.PlayerData.Urethra = true;
				return;
			}
			
			if (p.PlayerData.Urethra)
			{	
				if (p.player.ReadyWeapon == Weapon(p.FindInventory("PostUrethra")))
				{
					p.Player.PendingWeapon = p.PlayerData.HolsterSave;
					p.PlayerData.Urethra = false;
				}
				else
				{
					p.A_StartSound("piss/zipperdown", CHAN_BODY);
					p.PlayerData.HolsterSave = p.player.ReadyWeapon;
					p.Player.PendingWeapon = Weapon(p.FindInventory("PostUrethra"));
					//Console.Printf("If ReadyWeapon not same as PD_UrethraSave (else)");
				}
			}
	  }
	  
	  if (e.Name ~== "Suicide")
	  {
			PostalDude p = PostalDude(players[e.Player].mo);
			PlayerInfo player = players [e.Player];
			
			if (!p || !p.PlayerData) return;
			
			if (p.bKILLED) return;
			
			if (!(p.pos.z ~== p.floorz)) return;
			
			p.PlayerData.Suicide = true;
			p.SuicideAngle = p.Angle;
			
			
	  }
	  
	  if (e.Name ~== "Taunt")
	  {
			PostalDude p = PostalDude(players[e.Player].mo);
			PlayerInfo player = players [e.Player];
			
			if (!p || !p.PlayerData) return;
			if (p.bKILLED || p.SuicideCamera) return;
			
			if (p.PlayerData.InsultCooldown < level.time)
			{
				bool rr = random[randoms](0,1);
				
				if (rr)
					p.A_StartSound("dudeline64", CHAN_VOICE);
				else 
					p.A_StartSound("dudeline6", CHAN_VOICE);
				
				
				BlockThingsIterator it;
				
				it = BlockThingsIterator.Create (p, 250);
						
				while (it.Next ()) {
					let next = it.Thing;
					
					if (next is 'NPCCore' && !(next.bKILLED))
					{
						let pp = NPCCore(next);
						if (!pp.isBusy && !pp.isAfterTarget && pp)
						{
							pp.isBusy = true;
							pp.MyTarget = p;
							pp.vel.xy = (0,0);
							pp.G_GotTauntedAt = true;
							pp.SetStateLabel("Stare");
						}
					}
				}
				
				p.PlayerData.InsultCooldown = level.time + 35 * 2.5;
			}
	  }
	  
	  if (e.Name ~== "Map")
	  {
			PostalDude p = PostalDude(players[e.Player].mo);
			PlayerInfo player = players [e.Player];
			
			if (p.bKILLED) return;
			if (!p || !p.PlayerData) return;
			if (p.SuicideCamera) return;
			
			Console.Printf("M pressed");
			if (p.Map == false)
			{
				p.Map = true;
				p.A_PlaySound("map/uncrumple",0);
			}
			else
			{
				p.Map = false;
				p.A_PlaySound("map/crumple",0);
			}
	  }
	  
	  if (e.Name ~== "DamageSelf")
	  {
			PostalDude p = PostalDude(players[e.Player].mo);
			PlayerInfo player = players [e.Player];
			
			if (!p || !p.PlayerData) return;
			
		if (p)
			p.A_DamageSelf(5);
		
	  }
	  
	  if (e.Name ~== "DropInventoryItem" || e.Name ~== "DropWeaponItem")
	  {
			PostalDude p = PostalDude(players[e.Player].mo);
			PlayerInfo player = players [e.Player];
			
			// Player drops currently selected inventory item
			// todo: Special inventory drops, for ex.: Catnip, pissed donuts, etc...
			
			if (!p || !p.PlayerData) return;
			
			if (p && e.Name ~== "DropInventoryItem")
			{
				if (p.SuicideCamera || p.isInventoryUsed) return;
				
				let item = p.invSel.GetClassName();
				p.A_TakeInventory(item,1);
				
				let itemspawn = p.Spawn(item, p.pos+(0,0,45));
				if (itemspawn)
				{
					itemspawn.angle = p.angle;
					itemspawn.A_Recoil(-4);
					itemspawn.vel.z += 0.5;
					itemspawn.angle = random(0,360);
				}
			}
			
			// Player drops currently equipped weapon
			
			if (p && e.Name ~== "DropWeaponItem")
			{
				if (p.SuicideCamera || p.isWeaponThrown) return;
				
				// Note: Player must absolutely not drop these 3 weapons
				if (p.player.ReadyWeapon == Weapon(p.FindInventory("PostHands")) ||
					p.player.ReadyWeapon == Weapon(p.FindInventory("PostUrethra")) ||
					p.player.ReadyWeapon == Weapon(p.FindInventory("PostMatchbox"))) return;
				
				// Check if weapon is in Ready state, if not do NOT drop the weapon
				// Note: This makes isWeaponThrown check totally useless
				let psp = p.player.getpsprite(1);
				let wep = p.player.ReadyWeapon;
				
				if (psp && wep && !(p.InStateSequence(psp.curstate, wep.ResolveState("Ready")))) return;
				
				// Get the weapon's name directly
				let item = wep.GetClassName();
				
				// Force the player to holster
				p.player.PendingWeapon = Weapon(p.FindInventory("PostHands"));
				
				// Take away the weapon
				p.A_TakeInventory(item);
				
				// Let's spawn a new weapon
				let itemspawn = p.Spawn(item, p.pos+(0,0,55));
				if (itemspawn)
				{
					let a = PostalWeapon(itemspawn);
					if (a)
					{
						a.angle = p.angle;
						a.A_Recoil(-6);
						a.vel.z += 0.5;
						a.angle = random(0,360);
						a.STD_Dropped = true;
					}
				}
			}
	  }
	  
			// Zoom in or out Suiciding
			
			if (e.Name ~== "ZoomSuicide")
			{
				PostalDude p = PostalDude(players[e.Player].mo);
				PlayerInfo player = players [e.Player];
				
				if (!p || !p.PlayerData) return;
				
				if (p.SuicideCamera && p)
				{
					let a = CameraRunner(p.SuicideCamera);
					
					if (a)
					{
						if(e.Args[0] == 0x198)
						{
							if (a.zoomH + 2 >= 100) return;
							
							a.zoomH += 2;
						}
							
						if (e.Args[0] == 0x199)
						{
							if (a.zoomH - 2 <= -80) return;
							
							a.zoomH -= 2;
						}
					}
				}
			}
	  
   }
   
   override void PlayerEntered (PlayerEvent e)
   {
		PostalDude p = PostalDude(players[e.PlayerNumber].mo);
		
		if (p != null)
		{
			p.A_TakeInventory("PostKick",100);
			p.Kick = false;
			
			if (p.PlayerData)
				p.PlayerData.InsultCooldown = level.time + 35 * 2.5;
			
			return;
		}
		
		PlayerPawn n = PlayerPawn(players[e.PlayerNumber].mo);
		if (n && p == null)
		{
			n.A_GiveInventory("HUDViewable",1);
			n.A_GiveInventory("YouSpinMyHeadRightRoundRightRoundLikeARecordBabyRightRoundRightRound",1);
		}
		
   }
   
   //Needed for fire and other things
   override void WorldThingSpawned (Worldevent e)
   {
		// Replacing ZDoom patrolpoints on STD levels with Carnodes
		bool STD_Levels =
		(
			Level.Mapname.Left(5) ~== "world" ||
			Level.Mapname ~== "DOOMTEST"
		);
		
		/*
		if (!(e.thing is 'PostalActor') && e.thing.bISMONSTER && !(e.thing is 'PlayerPawn')) 
		{
			//e.thing.bSPECIAL = true;
			//e.thing.bPICKUP = true;
		}
		*/
		
		CVar lightscvar = CVar.FindCVar('postal_lights');
		bool lights = (lightscvar != null && lightscvar.GetBool ());
		
		if (!lights)
		{
			if (e.thing is 'PointLight')
				e.thing.Destroy();
		}
		
		CVar grasscvar = CVar.FindCVar('postal_grass');
		bool grass = (grasscvar != null && grasscvar.GetBool ());
		
		if (!grass)
		{
			if (e.thing is 'grass1' || e.thing is 'grass2' || e.thing is 'weedS1' || e.thing is 'weedS2')
				e.thing.Destroy();
		}
		
		let SpawnedThing = e.Thing;
		
		if (SpawnedThing is "PatrolPoint" && STD_Levels)
		{
			actor nodee = SpawnedThing.Spawn("Postal_Carnode", SpawnedThing.pos);
			let node = Postal_Carnode(nodee);
			let ZDpatrolpoint = PatrolPoint(SpawnedThing);
			
			if (node && ZDpatrolpoint)
			{
				node.user_PatrolNextTag = ZDpatrolpoint.args[0];
				node.user_PatrolTag = ZDpatrolpoint.tid;
				node.angle = ZDpatrolpoint.angle;
				ZDpatrolpoint.Destroy();
			}
		}
		
		CVar monstacvar = CVar.FindCVar('postal_monsterreplacee');
		bool monsta = (monstacvar != null && monstacvar.GetBool ());
		
		if (!STD_Levels && monsta)
		{
			if (!SpawnedThing) return;
			
			if (SpawnedThing is 'PostalDecoration' || SpawnedThing is 'PostalActor') return;
			
			if (SpawnedThing is 'BossBrain' ||
				SpawnedThing is 'BossEye' ||
				SpawnedThing is 'BossTarget' ||
				SpawnedThing is 'CommanderKeen' ||
				SpawnedThing is 'Sorcerer1' ||
				SpawnedThing is 'Sorcerer2' ||
				SpawnedThing is 'Dragon' ||
				SpawnedThing is 'ClericBoss' ||
				SpawnedThing is 'MageBoss' ||
				SpawnedThing is 'FighterBoss' ||
				SpawnedThing is 'Heresiarch' ||
				SpawnedThing is 'Korax' ||
				SpawnedThing is 'StrifeHumanoid' ||
				SpawnedThing is 'SpectralMonster' ||
				SpawnedThing is 'EntityNest' ||
				SpawnedThing is 'EntityPod' ||
				SpawnedThing is 'Loremaster' ||
				SpawnedThing is 'Oracle' ||
				SpawnedThing is 'Programmer' ||
				SpawnedThing is 'StrifeBishop' ||
				SpawnedThing is 'KneelingGuy')
					return;
			
				if (SpawnedThing.bISMONSTER && SpawnedThing.Health > 0 && SpawnedThing)
				{
					int chance = random[cc](0,50);
					if (chance >= 25 && SpawnedThing.Tid == 0)
					{
						actor NPC = SpawnedThing.Spawn("NPCCore", SpawnedThing.pos);
						if (NPC)
						{
							NPC.angle = SpawnedThing.angle;
							
							/*
							NPC.ChangeTid(SpawnedThing.tid);
							
							int j = 0;
							while (j < 5)
							{
								NPC.args[j] = SpawnedThing.args[j];
								j++;
							}
							*/
							
							SpawnedThing.Destroy();
						}
					}
					else SpawnedThing.A_GiveInventory("PostalNPCMonsterChecker");
				}
		}
		
   }
	
	string CurrentMap;
	override void WorldTick()
	{
		bool STD_Levels =
		(
			Level.Mapname.Left(5) ~== "world" ||
			Level.Mapname ~== "DOOMTEST"
		);
		
		let player = players[consoleplayer].mo;
		
		if (!STD_Levels && player && CurrentMap != Level.Mapname && player is 'PostalDude')
		{
			bool trigorno = random[trig](0,1);
			
			if (trigorno)
			{
				int randomnumber = random[pickline](1,6);
				string Dude_RandomLevel = string.Format("Dude_RandomLevel%i",randomnumber);
				player.A_StartSound(Dude_RandomLevel, CHAN_VOICE, CHANF_NOSTOP);
			}
		}
		
		//Unfuck situations
		
		let PDude = PostalDude(player);
		if (PDude)
		{
			if (CurrentMap != Level.Mapname)
			{
				PDude.A_TakeInventory("PostKick",100);
				PDude.Kick = false;
				PDude.InitLine = false;
				PDude.isinPain = false;
				PDude.TimeBeforeNextPainLine = level.time;
				PDude.A_GiveInventory("HUDViewable",1);
				PDude.A_TakeInventory("CameraRunner",1);
				PDude.bDONTTHRUST = false;
				PDude.Speed = PDude.Default.Speed;
				PDude.JumpZ = PDude.Default.JumpZ;
				if (PDude.PlayerData)
				{
					PDude.PlayerData.InsultCooldown = level.time;
					PDude.PlayerData.DudeLineCooldown = level.time;
					PDude.PlayerData.DudeLineTriggered = false;
					PDude.PlayerData.RunningStopCooldown = level.time;
					PDude.PlayerData.SpawnedOnce = false;
					PDude.PlayerData.Suicide = false;
				}
				
				Currentmap = Level.Mapname;
			}
		}
		
		
		if (gameaction == ga_savegame || gameaction == ga_autosave)
		{
			let player = players[consoleplayer].mo;
			
			if (SavedTimes == 4 && SavedTrigger != true)
			{
				player.A_PlaySound("dude_save2",0);
				SavedTrigger = true;
			}
			
			if (SavedTimes == 5 && SavedTrigger != true)
			{
				player.A_PlaySound("dude_save1",0);
				SavedTrigger = true;
			}
			
			if (SavedTimes == 6 && SavedTrigger != true)
			{
				player.A_PlaySound("dude_save3",0);
				SavedTimes = 0;
				SavedTrigger = true;
			}
			
			SavedTimes++;
			SavedTrigger = false;
		}
	
	}
	
	// Used for initiating Dude's killing spree lines
	// This is universal
	override void WorldThingDied(WorldEvent e)
	{	
		if (e.Inflictor && e.Thing)
		{
			let player = players[consoleplayer].mo;
			let p = PostalDude(player);
			
			if (!p) return;
			
			if (e.Thing != p)
			{
				//Is there a way to maybe get the killer and not the target?
				if (e.Thing.target == p)
				{
					if (p != null && !(p.bKILLED))
					{
						let pa = PostalActor(e.Thing);
						if (pa && pa.STD_NoKillLine) return;
						
						p.InitLine = true;
					}
				}
			}
			//else if (e.Thing == PostalDude(e.Inflictor))
			//	Console.Printf("Player suicided!");
		}
	}
	
	override bool InputProcess (InputEvent e)
	{
		if (e.KeyScan == e.Key_MWheelUp || e.KeyScan == e.Key_MWheelDown)
			SendNetworkEvent("ZoomSuicide", e.KeyScan);
			
		return false;
	}
}
