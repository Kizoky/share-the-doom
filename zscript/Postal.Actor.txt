class PostalActor : Actor { }
class PostalInventory : Inventory { }

extend class PostalActor
{
	Actor AnnoyingFire;
	int Delayy;
	
	action void A_CheckForTargets()
	{
		//many thanks to phantombeta!!
		double fov = 110; // this should be an argument, variable or constant instead, this is just here as an example
		BlockThingsIterator it = BlockThingsIterator.Create (self, 500); // The number here is (possibly roughly) the maximum distance they can see
		
		while (it.Next () && it.Thing != null) {
			let next = it.Thing;
			
			if (!next.bShootable || next.bKilled || next.health < 1)
			{
				continue;
			}
			
			if (!(level.mapname ~== "titlemap"))
			{
				if (AbsAngle (AngleTo (next), angle) > (fov / 2.)) // Not within FOV
				{
					continue;
				}
			}
			
			if (!CheckSight (next, SF_SeePastShootableLines)) // Not in sight
				continue;

			// Do things with the "next" pointer here
			
				if (next != null)
				{
					if (next is 'NPCCore' && !next.bKILLED) //|| next is 'Champ' || next is 'PostalCatInv')
					{
						A_PlaySound(SeeSound);
						target = next;
						SetStateLabel("See");
						Console.Printf("Target in sight!");
						return;
					}
					
					//Imo, this isn't much different from A_Look, but we do this anyway
					if (next is 'PostalDude')
					{
						let PlayerDude = PostalDude(next);
						if (PlayerDude.PlayerData.P_NoTarget != true)
						{
							A_PlaySound(SeeSound);
							target = next;
							SetStateLabel("See");
						}
					}
				}
			
			}
			
		}
		
		/*override void Tick()
		{
			Super.Tick();
			if (level.time > Delayy)
			{
				Delayy = level.time + 35 * 2;
				A_CheckForTargets();
			}
		}
		
		override void PostBeginPlay()
		{
			Super.PostBeginPlay();
			Delayy = level.time + 35 * 2;
		
		}
		*/
		
		virtual void A_PlaySelfSound() { A_PlaySound(SeeSound); }
			
			
}


extend class PostalInventory
{
	override void Touch (Actor toucher)
	{
		if (toucher is 'PostalDude')
		{
		
			let player = toucher.player;

			// If a voodoo doll touches something, pretend the real player touched it instead.
			if (player != NULL)
			{
				toucher = player.mo;
			}

			//bool localview = toucher.CheckLocalView();

			//if (!toucher.CanTouchItem(self))
			//	return;

			bool res;
			[res, toucher] = CallTryPickup(toucher);
			if (!res) return;

			// This is the only situation when a pickup flash should ever play.
			if (PickupFlash != NULL && !ShouldStay())
			{
				Spawn(PickupFlash, Pos, ALLOW_REPLACE);
			}

			if (!bQuiet)
			{
				//PrintPickupMessage(localview, PickupMessage ());

				// Special check so voodoo dolls picking up items cause the
				// real player to make noise.
				if (player != NULL)
				{
					PlayPickupSound (player.mo);
					if (!bNoScreenFlash)
					{
						player.bonuscount = BONUSADD;
					}
				}
				else
				{
					PlayPickupSound (toucher);
				}
			}							

			// [RH] Execute an attached special (if any)
			DoPickupSpecial (toucher);

			if (bCountItem)
			{
				if (player != NULL)
				{
					player.itemcount++;
				}
				level.found_items++;
			}

			if (bCountSecret)
			{
				Actor ac = player != NULL? Actor(player.mo) : toucher;
				ac.GiveSecret(true, true);
			}

			//Added by MC: Check if item taken was the roam destination of any bot
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (players[i].Bot != NULL && self == players[i].Bot.dest)
					players[i].Bot.dest = NULL;
			}
		
		}
	}



}