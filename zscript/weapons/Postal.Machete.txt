class PostMachete : PostalWeapon
{
	bool BladeCatch;
	Actor Blade;
	
	action void A_MacheteTryHit()
	{
		FLineTraceData lineData;
		LineTrace(angle,52,pitch,offsetz: height, data: LineData);
		
		if (LineData.HitType == TRACE_HitNone)
		{
			A_PlaySound("weapons/machete_swingmiss", CHAN_WEAPON);
			return;
		}
		
		if (LineData.HitType == TRACE_HitActor)
		{
			if (LineData.HitActor is 'NPCHead')
			{
				A_PlaySound("weapons/machete_slice", CHAN_WEAPON);
				A_MacheteHit(50);
				return;
			}
			
			A_PlaySound("weapons/machete_slice", CHAN_WEAPON);
			A_MacheteHit(0);
			return;
		}
		
		// Todo bodyparts attack (i.e. limbattack)
		
		if (LineData.HitType == TRACE_HitWall)
		{
			A_PlaySound("weapons/machete_hitwall", CHAN_WEAPON);
			A_MacheteHit(0);
			return;
		}
		
		if (LineData.HitType == TRACE_HitFloor || LineData.HitType == TRACE_HitCeiling)
		{
			A_PlaySound("weapons/machete_hitground", CHAN_WEAPON);
			A_MacheteHit(0);
			return;
		}
	}
	
	action void A_MacheteHit(int extradamage)
	{
		FTranslatedLineTarget t;

		int damage = extradamage + random(14, 18);

		double ang = angle;
		double pitch = AimLineAttack (ang, DEFMELEERANGE, null, 0., ALF_CHECK3D);

		LineAttack (ang, DEFMELEERANGE, pitch, damage, 'Melee', "PostalMeleeHitPuff", LAF_ISMELEEATTACK, t);
	
	}
	
	bool HitGroundOnce;
	
	override void Tick()
	{
		Super.Tick();
		
		if (owner) return;
			
		if (pos.z == floorz && HitGroundOnce != true)
		{
			A_PlaySound("weapons/machete_hitground", CHAN_WEAPON);
			HitGroundOnce = true;
		}
	}
	
	Default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Obituary "$OB_MPSHOTGUN";
		Tag "$TAG_SHOTGUN";
		Inventory.PickupMessage "You got the machete. Slice some meat";
		+Weapon.NoAlert;
	}
	States
	{
	Ready:
		TNT1 A 1
		{
			cvar idlinganimcvar = cvar.findcvar('postal_idleanim');
			bool idlinganim = (idlingAnimCVar != null && idlingAnimCVar.GetBool ());
			
			if (idlinganim)
				return ResolveState ("Ready.IdleAnim");
			else
				return ResolveState ("Ready.NoIdleAnim");
			
			return ResolveState (null);
		}
		Loop;
	Ready.IdleAnim:
		MAID ABCDEFGHIJKLMNO 6 A_WeaponReady;
		MAID A 0;
		Goto Ready;
	Ready.NoIdleAnim:
		MAID A 1 A_WeaponReady;
		Goto Ready;
	Deselect:
		TNT1 AAAAAAAAAAAAAAA 0 A_Lower;
		MAHO A 1 Offset(0,0);
		Loop;
	Select:
		TNT1 AAAAAAAAAAAAAAA 0 A_Raise;
		TNT1 A 0 A_WeaponOffset(0,32); // Fix "bump" when weapon is selected
		TNT1 A 0 A_PlaySound("weaponselect1", 7 | 4096);
		PGNS ABCDE 2 A_WeaponReady;
		MAID A 0 A_WeaponReady;
		Loop;
	Fire:
		TNT1 A 0
		{
			int randomfire = random(1,4);
			
			switch(randomfire)
			{
				default: Console.Printf("An error has occurred: PostMachete default case"); break;
				case 1: return ResolveState("Fire1"); break;
				case 2: return ResolveState("Fire2"); break;
				case 3: return ResolveState("Fire3"); break;
				case 4: return ResolveState("Fire4"); break;
			}
			
			return ResolveState(null);
		
		}
		//PGNS A 7 A_ReFire;
	Fire1:
		SWI1 A 0
		{
			A_MacheteTryHit();
		
		}
		SWI1 ABCDEF 3;
		MAID A 0 A_ReFire;
		Goto Ready;
	Fire2:
		SWI2 A 0
		{
			A_MacheteTryHit();
		}
		SWI2 ABCDE 3;
		MAID A 0 A_ReFire;
		Goto Ready;
	Fire3:
		SWI3 A 0
		{
			A_MacheteTryHit();
		
		}
		SWI3 ABCDEFGH 2 ;
		MAID A 0 A_ReFire;
		Goto Ready;
	Fire4:
		SWI4 A 0
		{
			A_MacheteTryHit();
		
		}
		SWI4 ABCDEFGHI 2;
		MAID A 0 A_ReFire;
		Goto Ready;
	AltFire:
		MASF ABC 2;
		MASF D 0
		{
			A_PlaySound("weapons/machete_throw", CHAN_WEAPON);
			
			class<actor> Boomerang = "BoomerangBall";
			
			Actor BoomerangShoot = SpawnPlayerMissile(Boomerang);
			//BoomerangShoot.Angle = self.Angle;
			
			if (BoomerangShoot)
			{
				let pp = BoomerangBall(BoomerangShoot);
				
				pp.Owner = self;
				invoker.Blade = pp;
			
			}
		
		}
		
		MASF DEFGHI 2;
		Goto Blade.Wait;
	Blade.Wait:
		BLWA ABCDEFGHIJKLMNOPQRST 3
		{
			if (invoker.BladeCatch)
			{
				invoker.BladeCatch = false;
				return ResolveState("Blade.Catch");
			}
			
			
			//If the Blade is destroyed (usually when it's dropped due to numerous reasons)
			if (invoker.Blade == null)
			{
				invoker.BladeCatch = false;
				return ResolveState("Blade.Fail");
			}
			
		
		return ResolveState(null);
		
		}
		Loop;
	Blade.Catch:
		BLCA A 0 A_PlaySound("weapons/machete_return", CHAN_WEAPON);
		BLCA ABCDEF 3;
		MAID A 0;
		Goto Ready;
	Blade.Fail:
		EMPT ABCDEF 4;
		TNT1 A 0
		{
			let p = PostalDude(self);
			p.Player.PendingWeapon = p.PlayerData.HolsterWeapon;
			p.Player.ReadyWeapon = p.PlayerData.HolsterWeapon;
			
			let d = Weapon(FindInventory("PostMachete"));
			RemoveInventory(d);
			
			return;
		}
		Goto Ready;
	Spawn:
		TNT1 A 0;
		PICK A -1;
		Stop;
	}
}

class BoomerangBall : PlasmaBall
{
	int TimeBeforeGoingBackToOwner, TimeBeforeAbsoluteVelocity;
	Actor Owner;
	bool CanDestroy;
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		TimeBeforeGoingBackToOwner = level.time + 150;
		TimeBeforeAbsoluteVelocity = 0;
		
		if (owner)
			Console.Printf("yes, I have an owner");
		
	
	
	}
	
	override void Tick()
	{
		Super.Tick();
		
		if (Owner)
		{
			if (Distance3D(Owner) < 80 && CanDestroy == true)
			{
				Console.Printf("Close!");
				
				let plr = PostalDude(Owner);
				
				let weapon = plr.player.ReadyWeapon;
				let ff = PostMachete(weapon);
				
				ff.BladeCatch = true;
				
				Destroy();
			}
			
			if (CanDestroy == true && TimeBeforeAbsoluteVelocity == 0)
				TimeBeforeAbsoluteVelocity = level.time + 70;
			
			Console.Printf("Distance under or above: %f", Distance3D(Owner));
			//Console.Printf("Pitch: %f", pitch);
		}
	
	
	}
	
	void A_BackToOwner()
	{
		if (Owner && level.time > TimeBeforeGoingBackToOwner)
		{
			bSEEKERMISSILE = TRUE;
			tracer = Owner;
			A_Tracer2(35);
			
			if (level.time > TimeBeforeAbsoluteVelocity && TimeBeforeAbsoluteVelocity != 0)
				Vel.Z = (owner.pos.Z + owner.Height/2 - pos.Z) / DistanceBySpeed(owner, 10);
				
			CanDestroy = true;
			
		}
	
	}
	
	Default
	{
		Scale 2.5;
		Speed 7;
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		BounceCount 10;
		BounceSound "weapons/machete_hitwall";
		SeeSound "";
		DeathSound "weapons/machete_hitground";
	}
  States
  {
  Spawn:
    PLSS AB 6 Bright
	{
		A_BackToOwner();
		A_PlaySound("weapons/machete_throwloop", CHAN_WEAPON);
		A_SpawnItemEx("Postal_Woosh");
	}
	Loop;
  Death:
    PLSE ABCDE 4 Bright;
	TNT1 A 0 A_SpawnItemEx("PostMachete");
    Stop;
  }
}

class Postal_Woosh : PostalActor
{
	vector3 spawnpos;
	bool randomroll;
	
	override void Tick()
	{
		Super.Tick();
		
		/*Alpha -= 0.011;
		if (Alpha < 0)
			Destroy();
		*/
		
		if (randomroll)
			roll += 17;
		else
			roll -= 17;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		spawnpos = pos;
		SetOrigin(spawnpos+(0,0,0), TRUE);
		
		randomroll = random(0,1);
		
	}
	
	
	Default
	{
		Mass 5;
		//+NOBLOCKMAP;
		//+NOTELEPORT;
		+ALLOWPARTICLES;
		RenderStyle "Translucent";
		Alpha 1;
		Scale 1.00;
		Speed 0.2;
		Gravity 0.25;
		+RANDOMIZE;
		+MISSILE;
		-SOLID;
		+NOGRAVITY;
		+ROLLSPRITE;
		+FLATSPRITE;
	}
	States
	{
	Spawn:
		WHOS AAAAAA 5;
		Stop;
	}
}