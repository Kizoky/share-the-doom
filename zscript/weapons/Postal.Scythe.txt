class PostScythe : PostalWeapon
{
	action void A_ScytheTryHit()
	{
		FLineTraceData lineData;
		LineTrace(angle,52,pitch,offsetz: height, data: LineData);
		
		if (LineData.HitType == TRACE_HitNone)
		{
			A_PlaySound("weapons/scythe_swingmiss", CHAN_WEAPON);
			return;
		}
		
		if (LineData.HitType == TRACE_HitActor)
		{
			if (LineData.HitActor is 'NPCHead')
			{
				A_PlaySound("weapons/scythe_slice", CHAN_WEAPON);
				A_ScytheHit(50);
				return;
			}
			
			A_PlaySound("weapons/scythe_slice", CHAN_WEAPON);
			A_ScytheHit(0);
			return;
		}
		
		// Todo bodyparts attack (i.e. limbattack)
		
		if (LineData.HitType == TRACE_HitWall)
		{
			A_PlaySound("weapons/scythe_hitwall", CHAN_WEAPON);
			A_ScytheHit(0);
			return;
		}
		
		if (LineData.HitType == TRACE_HitFloor || LineData.HitType == TRACE_HitCeiling)
		{
			A_PlaySound("weapons/scythe_hitwall", CHAN_WEAPON);
			A_ScytheHit(0);
			return;
		}
	}
	
	action void A_ScytheHit(int extradamage)
	{
		FTranslatedLineTarget t;

		int damage = extradamage + random(14, 18);

		double ang = angle;
		double pitch = AimLineAttack (ang, DEFMELEERANGE, null, 0., ALF_CHECK3D);

		LineAttack (ang, DEFMELEERANGE, pitch, damage, 'Melee', "PostalMeleeHitPuff", LAF_ISMELEEATTACK, t);
	
	}
	
	bool HitGroundOnce;
	
	override void Tick()
	{
		Super.Tick();
		
		if (owner) return;
		
		if (pos.z == floorz && HitGroundOnce != true)
		{
			A_PlaySound("weapons/scythe_hitground", CHAN_WEAPON);
			HitGroundOnce = true;
		}
	}
	
	Default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Obituary "$OB_MPSHOTGUN";
		Tag "$TAG_SHOTGUN";
		Inventory.PickupMessage "$GOTSHOTGUN";
		+Weapon.NoAlert;
	}
	States
	{
	Ready:
		TNT1 A 1
		{
			cvar idlinganimcvar = cvar.findcvar('postal_idleanim');
			bool idlinganim = (idlingAnimCVar != null && idlingAnimCVar.GetBool ());
			
			if (idlinganim)
				return ResolveState ("Ready.IdleAnim");
			else
				return ResolveState ("Ready.NoIdleAnim");
			
			return ResolveState (null);
		}
		Loop;
	Ready.IdleAnim:
		SCYI ABCDEFGHIJKLMNOP 5 A_WeaponReady;
		Goto Ready;
	Ready.NoIdleAnim:
		SCYS A 1 A_WeaponReady;
		Goto Ready;
	Deselect:
		TNT1 AAAAAAAAAAAAAAA 0 A_Lower;
		SCYH ABCDE 2 Offset(0,0);
		Loop;
	Select:
		TNT1 AAAAAAAAAAAAAAA 0 A_Raise;
		TNT1 A 0 A_WeaponOffset(0,32); // Fix "bump" when weapon is selected
		TNT1 A 0 A_PlaySound("weaponselect1", 7 | 4096);
		SCYS ABCDE 2 A_WeaponReady;
		Loop;
	Fire:
		SWIN ABC 3;
		Goto PullLoop;
	PullLoop:
		SWIN D 3
		{
			if (!(player.cmd.buttons & BT_ATTACK))
				return ResolveState ("SwingFinish");
				
			return ResolveState (null);
		}
		Loop;
	SwingFinish:
		SHOO A 0 A_ScytheTryHit();
		SHOO ABCDEF 4;
		Goto Ready;
	AltFire:
		PEPT ABC 3;
		Goto AltPull;
	AltPull:
		PEPT C 3
		{
			if (!(player.cmd.buttons & BT_ALTATTACK))
				return ResolveState ("AltFinish");
				
			return ResolveState (null);
		
		}
		Loop;
	AltFinish:
		SHO2 A 0
		{
			A_PlaySound("weapons/scythe_throw", CHAN_WEAPON);
			
			class<actor> Boomerang = "ThrownScythe";
			Actor ScytheShoot = SpawnPlayerMissile(Boomerang);
		
		}
		SHO2 ABCD 4;
		TNT1 A 0
		{
			let p = PostalDude(self);
			p.Player.PendingWeapon = p.PlayerData.HolsterWeapon;
			p.Player.ReadyWeapon = p.PlayerData.HolsterWeapon;
			
			let d = Weapon(FindInventory("PostScythe"));
			RemoveInventory(d);
			
			return;
		}
		Goto Ready; // <----- remove weapon from the Player
	UnusedStates:
		// Throw Idle
		TIDL AB 2;
		
		// HolsterEmpty
		HEMP ABCD 2;
		
		Goto Ready;
	Spawn:
		TNT1 A 0;
		PICK A -1;
		Stop;
	}
}

class ThrownScythe : PlasmaBall
{	

	override void Tick()
	{
		Super.Tick();
		
		if (BounceCount == 1)
		{
			A_SpawnItemEx("PostScythe");
			Destroy();
		}
	
	}
	
	Default
	{
		Scale 2.5;
		Speed 7;
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		BounceCount 2;
		BounceSound "weapons/scythe_hitwall";
		SeeSound "";
		DeathSound "weapons/scythe_hitground";
	}
  States
  {
  Spawn:
    PLSS AB 6 Bright
	{
		A_PlaySound("weapons/scythe_throwloop", CHAN_WEAPON);
	}
	Loop;
  Death:
    PLSE ABCDE 4 Bright;
	TNT1 A 0 A_SpawnItemEx("PostScythe");
    Stop;
  }
}