class PostScissors : PostalWeapon
{
	bool onWall;
	vector3 savedPOS;
	
	override void Tick()
	{
		Super.Tick();
		
		if (owner != null)
			return;
		
		if (onWall)
		{
			//todo: detection if scissors is in the air
			SetOrigin(savedPOS, TRUE);
		}
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		if (owner == null)
		{
			//Save the onspawn Position to later on force the pos to this value
			if (onWall)
			{
				savedPOS = pos;
			}
		}
	
	}
	
	Default
	{
		//$Category STD Weapons
		//$Title "Scissors"
		//$Sprite PICKA0
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 1;
		Weapon.AmmoType "Clip";
		Obituary "$PSTL_OB_SCISSORS";
		Tag "$PSTL_WP_SCISSORS";
		Inventory.PickupMessage "$PSTL_PP_SCISSORS";
		+Weapon.NoAlert;
		+ROLLSPRITE;
		+ABSMASKPITCH;
		Radius 12;
		Height 5;
	}
	States
	{
	Ready:
		SCII ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 A_WeaponReady;
		Loop;
	Deselect:
		SCID ABCDEFGHIJKLMN 2;
		SCID N 0 A_PostalLower();
		Loop;
	Select:
		SCIS A 0 A_PostalRaise(0);
		SCIS A 0 A_PlaySound("weaponselect1", 7 | 4096);
		SCIS ABCDEFGHIJKLMNOPQRS 2 A_WeaponReady;
		SCII A 0 A_PostalRaise(1);
		Loop;
	Fire:
		SCIF ABCD 2;
		SCIF E 0
		{
			A_PlaySound("scissors/fire", CHAN_WEAPON);
			
			class<actor> Scissor = "PostalScissor";
			Actor ScissorShoot = SpawnPlayerMissile(Scissor);
			
			if (ScissorShoot)
			{
				ScissorShoot.pitch = invoker.owner.pitch;
				
				let SS = PostalScissor(ScissorShoot);
				if (SS)
					ss.Owner = invoker.owner;
				
				self.A_TakeInventory("Clip",1);
			}
		
		}
		SCIF EFGHIJKL 2;
		Goto Ready;
	AltFire:
		SCSF A 0 A_PlaySound("scissors/altfire", CHAN_WEAPON);
		SCSF ABCDEFGHIJKLMNOPQ 2;
		SCSF R 0
		{	
			class<actor> Scissor = "PostalScissor";
			Actor ScissorShoot = SpawnPlayerMissile(Scissor);
			
			if (ScissorShoot)
			{
				ScissorShoot.pitch = invoker.owner.pitch;
				
				let SS = PostalScissor(ScissorShoot);
				
				if (SS)
				{
					SS.isBouncing = true;
					SS.OwnerPitch = invoker.owner.pitch;
					ss.Owner = invoker.owner;
				}
				
				self.A_TakeInventory("Clip",1);
			}
		
		}
		SCSF RST 2;
		Goto Ready;
	Spawn:
		TNT1 A 0;
		PICK A -1;
		Stop;
	}
}

class PostalScissor : Actor
{
	bool isBouncing, hitActor;
	double OwnerPitch;
	int CountingBounces;
	actor Owner;
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		//Only needed for the alt attack, bouncing Scissors
		//We don't need to create a new actor for that!
		if (isBouncing)
		{
			BounceCount = 7;
			CountingBounces = BounceCount;
			bBOUNCEONWALLS = true;
			bBOUNCEONFLOORS = true;
			bBOUNCEONCEILINGS = true;
			BounceFactor = 1;
			WallBounceFactor = 1;
			Speed = 60;
		}
	}
	
	override void Tick()
	{
		Super.Tick();
		
		//If via LineTraces an actor has been detected, go to Crash
		
		if (hitActor == true)
		{
			if (isBouncing)
			{
				SetStateLabel("Crash");
				return;
			}
			return;
		}
		
		
		//This is no longer needed as LineTraces instantly detect an actor
		/*
		if (isBouncing)
		{
			if (CountingBounces > BounceCount) //assuming it bounced off from something
			{	
				CountingBounces = BounceCount;
			}
		}
		*/
		
		//This will be probably the weirdest "hack" I have done in STD
		//Because of the way Crash and Death state works, I had to do this via LineTraces
		//Crash only works if the Actor has +NOBLOOD flag, but we don't want that
		//So with this the linetraces are looking -90 to 90 angle, also up and down to check for a potential Actor,
		//since by default the Scissors on death are spawning a Scissor which would stay onto a wall.
		//This doesn't affect performance
		
		if (InStateSequence(self.CurState, self.ResolveState("Spawn")))
		{
			double i = -90;
			while (i < 90)
			{
				FLineTraceData lineData;
				LineTrace(angle+i,65, i, data: LineData);
				//VectorBeam.SpawnVectorBeam(Self.pos + (0,0,0), LineData.HitLocation, 2.0, "FF0000", 2);
				
				if (LineData.HitType == TRACE_HitActor && lineData.HitActor != Owner && lineData.HitActor.Health > 1 && hitActor != true)
				{
					//Console.Printf("Detected actor");
					hitActor = true;
					return;
				}
				i++;
			}
		}
	}
	
	Default
	{
		Radius 15;
		Height 5;
		Speed 25;
		Damage 11;
		Projectile;
		+RANDOMIZE
		+ROLLSPRITE;
		+ABSMASKPITCH;
		SeeSound "";
		DeathSound "";
		BounceSound "scissors/bounce";
		Obituary "$OB_MPROCKET";
	}
	States
	{
	Spawn:
		PICK A 1;
		Loop;
	Death:
		TNT1 A 1
		{
			if (hitActor) { SetStateLabel("Crash"); return; }
			
			if (hitActor != true)
			{
				class<actor> Scissor = "PostScissors";
				Actor DroppedScissor = Spawn(Scissor, pos, NO_REPLACE);
				let DS = PostScissors(DroppedScissor);
				
				if (DS)
				{
					DS.onWall = true;
					DS.angle = self.angle;
					DS.pitch = self.pitch;
					A_PlaySound("scissors/wallstick", CHAN_AUTO);
				}
			}
		}
		Stop;
	Crash:
		TNT1 A 1 { A_PlaySound("scissors/bodystick", CHAN_AUTO); }
		Stop;
	}
}