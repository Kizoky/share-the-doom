class PostScissors : PostalWeapon
{
	bool onWall;
	vector3 savedPOS;
	
	override void Tick()
	{
		Super.Tick();
		
		if (owner != null)
			return;
		
		if (onWall)
		{
			//todo: detection if scissors is in the air
			SetOrigin(savedPOS, TRUE);
		}
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		if (owner == null)
		{
			if (onWall)
			{
				savedPOS = pos;
			}
		}
	
	}
	
	Default
	{
		//$Category STD Weapons
		//$Title "Scissors"
		//$Sprite PICKA0
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 1;
		Weapon.AmmoType "Clip";
		Obituary "$OB_MPSHOTGUN";
		Tag "$TAG_SHOTGUN";
		Inventory.PickupMessage "$GOTSHOTGUN";
		+Weapon.NoAlert;
		+ROLLSPRITE;
		+ABSMASKPITCH;
		Radius 12;
		Height 5;
	}
	States
	{
	Ready:
		SCII ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 A_WeaponReady;
		Loop;
	Deselect:
		TNT1 AAAAAAAAAAAAAAA 0 A_Lower;
		SCID ABCDEFGHIJKLMNO 2;
		Loop;
	Select:
		TNT1 AAAAAAAAAAAAAAA 0 A_Raise;
		TNT1 A 0 A_WeaponOffset(0,32); // Fix "bump" when weapon is selected
		TNT1 A 0 A_PlaySound("weaponselect1", 7 | 4096);
		SCIS ABCDEFGHIJKLMNOPQRS 2 A_WeaponReady;
		Loop;
	Fire:
		SCIF ABCD 2;
		SCIF E 0
		{
			A_PlaySound("scissors/fire", CHAN_WEAPON);
			
			class<actor> Scissor = "PostalScissor";
			Actor ScissorShoot = SpawnPlayerMissile(Scissor);
			
			if (ScissorShoot)
			{
				ScissorShoot.pitch = invoker.owner.pitch;
				
				let SS = PostalScissor(ScissorShoot);
				ss.Owner = invoker.owner;
			}
				
		
		}
		SCIF EFGHIJKL 2;
		Goto Ready;
	AltFire:
		SCSF A 0 A_PlaySound("scissors/altfire", CHAN_WEAPON);
		SCSF ABCDEFGHIJKLMNOPQ 2;
		SCSF R 0
		{	
			class<actor> Scissor = "PostalScissor";
			Actor ScissorShoot = SpawnPlayerMissile(Scissor);
			
			if (ScissorShoot)
			{
				ScissorShoot.pitch = invoker.owner.pitch;
				
				let SS = PostalScissor(ScissorShoot);
				SS.isBouncing = true;
				SS.OwnerPitch = invoker.owner.pitch;
				ss.Owner = invoker.owner;
			}
		
		}
		SCSF RST 2;
		Goto Ready;
	Spawn:
		TNT1 A 0;
		PICK A -1;
		Stop;
	}
}

class PostalScissor : Actor
{
	bool isBouncing, hitActor;
	double OwnerPitch;
	int CountingBounces;
	actor Owner;
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (isBouncing)
		{
			BounceCount = 7;
			CountingBounces = BounceCount;
			bBOUNCEONWALLS = true;
			bBOUNCEONFLOORS = true;
			bBOUNCEONCEILINGS = true;
			Speed = 60;
		}
	}
	
	override void Tick()
	{
		Super.Tick();
		if (isBouncing)
		{
			if (CountingBounces > BounceCount) //assuming it bounced off from something
			{
				if (hitActor == true)
				{
					SetStateLabel("Crash");
					return;
				}
				
				CountingBounces = BounceCount;
			
			}
		}
		
		if (hitActor == true) return;
		
		double i = -90;
		while (i < 90)
		{
			FLineTraceData lineData;
			LineTrace(angle+i,45, i, data: LineData);
			//VectorBeam.SpawnVectorBeam(Self.pos + (0,0,0), LineData.HitLocation, 2.0, "FF0000", 2);
			
			if (LineData.HitType == TRACE_HitActor && lineData.HitActor != Owner && lineData.HitActor.Health > 1)
			{
				//Console.Printf("Detected actor");
				hitActor = true;
				return;
			}
			i++;
		}
	}
	
	Default
	{
		Radius 15;
		Height 5;
		Speed 25;
		Damage 11;
		Projectile;
		+RANDOMIZE
		+ROLLSPRITE;
		+ABSMASKPITCH;
		SeeSound "";
		DeathSound "";
		BounceSound "scissors/bounce";
		Obituary "$OB_MPROCKET";
	}
	States
	{
	Spawn:
		PICK A 1;
		Loop;
	Death:
		TNT1 A 0
		{
			if (hitActor) {  A_PlaySound("scissors/bodystick", CHAN_AUTO); return; }
			
			class<actor> Scissor = "PostScissors";
			Actor DroppedScissor = Spawn(Scissor, pos, NO_REPLACE);
			let DS = PostScissors(DroppedScissor);
			
			DS.onWall = true;
			DS.angle = self.angle;
			DS.pitch = self.pitch;
			
			A_PlaySound("scissors/wallstick", CHAN_AUTO);
		
		}
		Stop;
	Crash:
		TNT1 A 0 { A_PlaySound("scissors/bodystick", CHAN_AUTO); }
		Stop;
	}
}