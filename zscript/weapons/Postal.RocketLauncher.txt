class PostRLauncher : PostalWeapon
{
	bool SeekingMissile;
	int DistanceFire;
	const DistanceValue = 1.5; //since we will rely on level.time...
	double nangle;
	
	override void Tick()
	{
		Super.Tick();
		
		if (!owner) return;
		
		//Console.Printf("Angle: %f", owner.angle % 180);
	
	}
	
	Default
	{
		//$Category STD Weapons
		//$Title "Missile Launcher"
		//$Sprite PICKA0
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Clip";
		+WEAPON.NOAUTOFIRE;
		Obituary "$PSTL_OB_ROCKET";
		Tag "$PSTL_WP_ROCKET";
		Inventory.PickupMessage "$PSTL_PP_ROCKET";
	}
	States
	{
	Ready:
		RLID ABCDEFGHIJKLMNOP 7 A_WeaponReady;
		Goto Ready;
	Deselect:
		TNT1 AAAAAAAAAAAAAAA 0 A_Lower;
		RLDE ABCDEFGHIJ 2;
		Loop;
	Select:
		TNT1 AAAAAAAAAAAAAAA 0 A_Raise;
		TNT1 A 0 A_WeaponOffset(0,32); // Fix "bump" when weapon is selected
		TNT1 A 0 A_PlaySound("weaponselect4", 7 | 4096);
		RLSE ABCDEFGHIJKLMNOPQRST 2 A_WeaponReady;
		Loop;
	Fire:
		RLHA A 0 A_PlaySound("weapons/fueling", 7 | 4096);
		RLHA ABCDEFGHIJKLMNOPQRSTUVWXYZ 3
		{
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				invoker.SeekingMissile = false;
				return ResolveState ("FireEnd");
			}
			else
				invoker.DistanceFire += DistanceValue;
			
			return ResolveState (null);
		}
		RLH2 ABCDEFGHIJ 3
		{
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				invoker.SeekingMissile = false;
				return ResolveState ("FireEnd");
			}
			else
				invoker.DistanceFire += DistanceValue;
			
			return ResolveState (null);
		}
		RLFI A 0 A_PlaySound("weapons/seeker", 7 | 4096);
		Goto FireLoop;
	FireLoop:
		RLFI ABCDEFGHIJKL 3
		{
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				invoker.SeekingMissile = true;
				return ResolveState ("FireEnd");
			}
			return ResolveState (null);
		}
		Loop;
	FireEnd:
		RLFA A 0
		{
			A_Quake(6,8,0,5);
			
			if (invoker.SeekingMissile == false)
			{
				class<actor> Rocket = "PostalRocket";
				Actor PRocket = A_FireProjectile(Rocket,0,1,25,11);
				if (PRocket == null) { invoker.DistanceFire = 0; return; }
				
				let PPRocket = PostalRocket(PRocket);
				if (PPRocket == null) { invoker.DistanceFire = 0; return; }
				
				PPRocket.AddedTime = invoker.DistanceFire;
				PPRocket.Pitch = invoker.owner.pitch;
				
				invoker.DistanceFire = 0;
			}
			else
			{
				invoker.DistanceFire = 0;
				A_FireProjectile("SeekerRocket");
			}
		
		}
		RLFA ABCDEFGHIJKLMN 3;
		Goto Ready;
	Spawn:
		TNT1 A 0;
		PICK A -1;
		Stop;
	}
}

//Unused
extend class PostRLauncher
{
	action void A_SeekerMode()
	{
		if (target == null) return;
		AddZ(16);
		Actor missile = SpawnMissile(target, "SeekerRocket");
		AddZ(-16);
		if (missile != null)
		{
			missile.SetOrigin(missile.Vec3Offset(missile.Vel.X, missile.Vel.Y, 0.), false);
			missile.tracer = target;
		}
	}
}

class PostalRocket : Actor
{
	int SpawnTime, AddedTime;
	double ShipDown;
	double PitchDown;
	bool Falling;
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SpawnTime = level.time + AddedTime;
		ShipDown = 0;
		PitchDown = 0;
	}
	
	override void Tick()
	{
		Super.Tick();
		
		//Console.Printf("%f > %f | Velocity: %f", level.time, SpawnTime, vel);
		if (level.time > SpawnTime)
		{
			// From Postal 2's SRC
			if (Falling != true)
			{
				vel.x = vel.x / 2;
				vel.y = vel.y / 2;
				
				if (vel.z > 0)
					vel.z = vel.z / 2;
					
				Falling = true;
			
			}
			
			if (pitch <= 90)
			{
				if (PitchDown != 10)
					PitchDown += 0.09;
				
				Pitch += PitchDown;
			}
			if (Pitch > 90)
				Pitch = 90;
			
			SetOrigin(pos-(0,0,ShipDown), TRUE);
			ShipDown += 0.38;
		}
	
	}
	
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		Damage 20;
		Projectile;
		+RANDOMIZE
		+DEHEXPLOSION
		//+ROCKETTRAIL
		+ROLLSPRITE;
		+ABSMASKPITCH;
		//+ZDOOMTRANS
		SeeSound "weapons/rocklf";
		DeathSound "weapons/rocklx";
		Obituary "$OB_MPROCKET";
	}
	States
	{
	Spawn:
		RRRR A 1 Bright;
		Loop;
	Death:
		TNT1 A 0
		{
			A_Quake(5,15,0,800);
			
			int i = 0;
			while (i < 10) {
				A_SpawnItemEx("PostalExplosionSmoke", FRandom(-52.5, 52.5), FRandom(-52.5, 52.5), FRandom(10, 52.5), FRandom(-12.5, 12.5) * RandomPick(0.0, 0.1), FRandom(0.1, 0.1) * RandomPick(-1, 1), FRandom(0.0, 0.1), 0, SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEANGLE | SXF_ABSOLUTEVELOCITY, 64);
				i++;
			}
		
		}
		TNT1 A 8 Bright A_Explode;
		TNT1 A 6 Bright;
		TNT1 A 4 Bright;
		Stop;
	}
}

class SeekerRocket : Actor
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 10;
		Damage 20;
		Projectile;
		+RANDOMIZE
		+DEHEXPLOSION
		+ROCKETTRAIL
		+ZDOOMTRANS
		+SEEKERMISSILE
		BounceType "Hexen";
		BounceCount 5;
		BounceSound "weapons/bounce";
		SeeSound "weapons/rocklf";
		DeathSound "weapons/rocklx";
		Obituary "$OB_MPROCKET";
	}
	States
	{
	Spawn:
		TNT1 A 0 A_SeekerMissile(0,45); //can turn 45 angle at max
		MISL A 1 Bright A_Tracer;
		Loop;
	Death:
		MISL B 8 Bright A_Explode;
		MISL C 6 Bright;
		MISL D 4 Bright;
		Stop;
	}
}