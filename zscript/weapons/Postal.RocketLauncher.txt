class PostRLauncher : PostalWeapon
{
	bool SeekingMissile, SecondaryFire;
	int DistanceFire;
	const DistanceValue = 1.85; //since we will rely on level.time...
	double nangle;
	
	override void Tick()
	{
		Super.Tick();
		
		if (!owner) return;
		
		//Console.Printf("Angle: %f", owner.angle % 180);
	
	}
	
	Default
	{
		//$Category STD Weapons
		//$Title "Missile Launcher"
		//$Sprite PICKA0
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Clip";
		+WEAPON.NOAUTOFIRE;
		Obituary "$PSTL_OB_ROCKET";
		Tag "$PSTL_WP_ROCKET";
		Inventory.PickupMessage "$PSTL_PP_ROCKET";
	}
	States
	{
	Ready:
		RLID ABCDEFGHIJKLMNOP 7 A_WeaponReady;
		Goto Ready;
	Deselect:
		RLDE ABCDEFGHI 2;
		RLDE I 0 A_PostalLower();
		Loop;
	Select:
		RLSE A 0 A_PostalRaise(0);
		RLSE A 0 A_PlaySound("weaponselect4", 7 | 4096);
		RLSE ABCDEFGHIJKLMNOPQRST 2 A_WeaponReady;
		RLID A 0 A_PostalRaise(1);
		Loop;
	Fire:
		RLHA A 0 A_StartSound("weapons/fueling", CHAN_WEAPON, CHAN_NOSTOP);
		RLHA ABCDEFGHIJKLMNOPQRSTUVWXYZ 3
		{
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				invoker.SeekingMissile = false;
				return ResolveState ("FireEnd");
			}
			else
				invoker.DistanceFire += DistanceValue;
			
			return ResolveState (null);
		}
		RLH2 ABCDEFGHIJ 3
		{
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				invoker.SeekingMissile = false;
				return ResolveState ("FireEnd");
			}
			else
				invoker.DistanceFire += DistanceValue;
			
			return ResolveState (null);
		}
		RLFI A 0 A_PlaySound("weapons/seeker", 7 | 4096);
		Goto FireLoop;
	FireLoop:
		RLFI ABCDEFGHIJKL 3
		{
			if (invoker.SecondaryFire)
			{
				if (!(player.cmd.buttons & BT_ALTATTACK))
					return ResolveState ("FireEnd");
			}
			
			if (!invoker.SecondaryFire)
			{
				if (!(player.cmd.buttons & BT_ATTACK))
				{
					if (invoker.SecondaryFire != true)
						invoker.SeekingMissile = true;
				
					return ResolveState ("FireEnd");
				}
			}
			return ResolveState (null);
		}
		Loop;
	FireEnd:
		RLFA A 0
		{
			A_StartSound("other/mute", CHAN_WEAPON);
			
			A_Quake(6,8,0,5);
			
			if (invoker.SeekingMissile == false || invoker.SecondaryFire == true)
			{
				class<actor> Rocket = "PostalRocket";
				Actor PRocket = A_FireProjectile(Rocket,0,1,25,11);
				if (PRocket == null) { invoker.DistanceFire = 0; return; }
				
				let PPRocket = PostalRocket(PRocket);
				if (PPRocket == null) { invoker.DistanceFire = 0; return; }
				
				PPRocket.AddedTime = invoker.DistanceFire;
				PPRocket.Pitch = invoker.owner.pitch;
				
				invoker.DistanceFire = 0;
				invoker.SecondaryFire = false;
			}
			else
			{
				class<actor> Rocket = "PostalRocket";
				Actor PRocket = A_FireProjectile(Rocket,0,1,25,11);
				
				if (PRocket == null) { invoker.DistanceFire = 0; return; }
				
				let PPRocket = PostalRocket(PRocket);
				if (PPRocket == null) { invoker.DistanceFire = 0; return; }
				
				PPRocket.Pitch = invoker.owner.pitch;
				PPRocket.Seeking = true;
				
				//In Postal 2 you can aim for a target, if it's on your crosshair the rocket will target that NPC
				//Otherwise it will search for a new potential target..
				FLineTraceData lineData;
				LineTrace(invoker.owner.angle,8096,invoker.owner.pitch, offsetz: invoker.owner.height, data: LineData);
				
				if (LineData.HitType == TRACE_HitActor && lineData.HitActor != invoker.Owner && lineData.HitActor.Health > 1)
				{
					Console.Printf("Got a target for seeking");
					PPRocket.SeekingTarget = LineData.HitActor;
				}
				
				PPRocket.Owner = invoker.owner;
				
				invoker.DistanceFire = 0;
				
				invoker.SeekingMissile = false;
			}
		
		}
		RLFA ABCDEFGHIJKLMN 3;
		Goto Ready;
	AltFire:
		RLHA A 0 A_StartSound("weapons/fueling", CHAN_WEAPON, CHAN_NOSTOP);
		RLAF ABCDEFGHIJKLMNOPQRSTUVWXYZ 3
		{
			invoker.SecondaryFire = true;
			
			if (!(player.cmd.buttons & BT_ALTATTACK))
			{
				invoker.SeekingMissile = false;
				return ResolveState ("FireEnd");
			}
			else
				invoker.DistanceFire += DistanceValue;
			
			return ResolveState (null);
		}
		RLA2 ABCDEFGHIJ 3
		{
			invoker.SecondaryFire = true;
			
			if (!(player.cmd.buttons & BT_ALTATTACK))
			{
				invoker.SeekingMissile = false;
				return ResolveState ("FireEnd");
			}
			else
				invoker.DistanceFire += DistanceValue;
			
			return ResolveState (null);
		}
		Goto FireLoop;
	Spawn:
		TNT1 A 0;
		PICK A -1;
		Stop;
	}
}

class PostalRocket : PostalActor
{
	int SpawnTime, AddedTime, SeekingTime, BounceCooldown;
	double PitchDown;
	bool Falling, Seeking;
	Actor SeekingTarget, Owner;
	
	int BleepTime;
	
	action void A_SeekerThink()
	{
		if (invoker.SeekingTarget != null) return;
		
		double fov = 90; // this should be an argument, variable or constant instead, this is just here as an example
		BlockThingsIterator it = BlockThingsIterator.Create (self, 1000); // The number here is (possibly roughly) the maximum distance they can see
		
			while (it.Next () && it.Thing != null) {
				let next = it.Thing;
				
				if (AbsAngle (AngleTo (next), angle) > (fov / 2.)) continue;
			
				if (!CheckSight (next, SF_SeePastShootableLines)) continue;
				
				for (int i = 0; i < invoker.AI_NeverTarget.Size()-1; i++)
				{
					if (next is invoker.AI_NeverTarget[i]) return;
				}
				
				if (next != invoker.Owner && next.Health > 1 && !next.bFRIENDLY && next != self && next.bSHOOTABLE && !next.bKILLED)
					invoker.SeekingTarget = next;
				
			}
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (Seeking != true)
			SpawnTime = level.time + AddedTime;
		else
		{
			Speed = 15;
			bBOUNCEONWALLS = true;
			bBOUNCEONFLOORS = true;
			bBOUNCEONCEILINGS = true;
			BounceFactor = 1;
			WallBounceFactor = 1;
			bSEEKERMISSILE = true;
			bDONTBOUNCEONSKY = true;
			bUSEBOUNCESTATE = true;
			
			SeekingTime = level.time + (35 * 17); // Seeking missiles lasts for 17 seconds if not destroyed
			BleepTime = level.time + (35 * 3);
		}
		PitchDown = 0;
		
		STD_NoKillLine = true;
		STD_NeverTarget = true;
	}
	
	override void Tick()
	{
		Super.Tick();
		
		if (level.time > BleepTime && SeekingTarget)
		{
			SeekingTarget.A_StartSound("weapons/rocket_bleep", CHAN_BODY, CHANF_LOCAL);
			BleepTime = level.time + (35 * 3);
		}
		
		if (level.time > SeekingTime && Seeking && !SeekingTarget)
		{
			BounceCount = 1;
			Seeking = false;
		}
		
		if (Seeking) return;
		
		if (level.time > SpawnTime)
		{
			// From Postal 2's SRC
			if (Falling != true)
			{
				vel.x = vel.x / 2;
				vel.y = vel.y / 2;
				
				if (vel.z > 0)
					vel.z = vel.z / 2;
					
				int i = 0;
				while (i < 3) {
					vector3 poss = (frandom(-8,8),frandom(-8,8),frandom(-8,8));
					let Smoke = Spawn("PostalSmokeTrail", pos+poss);
					if (Smoke)
					{	
						Smoke.vel = (frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(-0.3,0.3));
						
						let pp = PostalSmokeTrail(Smoke);
						pp.bouncesmoke = true;
						Smoke.Scale = (8.0,8.0);
					}
					i++;
				}
				Falling = true;
			}
			
			
			if (pitch <= 90)
			{
				if (PitchDown != 10)
					PitchDown += 0.05;
				
				Pitch += PitchDown;
			}
			
			
			if (Pitch > 90)
				Pitch = 90;
			
			vel.z -= 0.35;
		}
		else
			SetOrigin(pos-(0,0,1.5), TRUE);
	
	}
	
	Default
	{
		Radius 11;
		Height 8;
		Speed 28;
		Damage 20;
		Projectile;
		Health 15;
		+RANDOMIZE
		+DEHEXPLOSION
		+ROLLSPRITE
		-NOBLOCKMAP
		+NOTARGETSWITCH
		+ABSMASKPITCH
		+SHOOTABLE
		SeeSound "weapons/rocket_fire";
		DeathSound "weapons/rocket_explode";
		BounceSound "weapons/rocket_bounce";
		Obituary "$OB_MPROCKET";
	}
	States
	{
	Spawn:
		RRRR A 1 Bright
		{
			A_SpawnItemEx("PostalSmokeTrail", FRandom(-3, 3), FRandom(-3, 3), FRandom(-3, 3), FRandom(-0.3, 0.3), FRandom(-0.3, 0.3), FRandom(-0.3, 0.3), 0, SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEANGLE | SXF_ABSOLUTEVELOCITY, 64);
			
			if (Seeking || !Falling)
			{
				A_StartSound("weapons/rocket_active", CHAN_BODY, CHANF_LOOPING | CHANF_NOSTOP);
				
				int i = 0;
				while (i < 15) {
					vector3 poss = (frandom(-5,5),frandom(-5,5),frandom(-5,5));
					let Fire = Spawn("PostalFireTrail", pos+poss);
					if (Fire)
					{	
						Fire.vel = (frandom(-0.5,0.5),frandom(-0.3,0.3),frandom(-0.5,0.5));
					}
					i++;
				}
			}
			else
				A_StartSound("other/mute", CHAN_BODY);
			
			if (SeekingTarget)
			{
				if (tracer != SeekingTarget && SeekingTarget != null) tracer = SeekingTarget;
				
				if (tracer)
				{
					if (level.time > BounceCooldown)
					{
						Vel.Z = (tracer.pos.Z + tracer.Height/2 - pos.Z) / DistanceBySpeed(tracer, 10);
						A_Tracer2(6.5);
						A_FaceTracer(6,180);
					}
				}
			}
			else
				A_SeekerThink();
		}
		Loop;
	Bounce:
		RRRR A 0
		{
			BounceCooldown = level.time + 9;
			int i = 0;
			while (i < 3) {
				vector3 poss = (frandom(-8,8),frandom(-8,8),frandom(-8,8));
				let Smoke = Spawn("PostalSmokeTrail", pos+poss);
				if (Smoke)
				{	
					Smoke.vel = (frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(-0.3,0.3));
					
					let pp = PostalSmokeTrail(Smoke);
					pp.bouncesmoke = true;
					Smoke.Scale = (8.0,8.0);
				}
				i++;
			}
		}
		Goto Spawn;
	Death:
		TNT1 A 0
		{
			A_Quake(5,15,0,800);
			
			int i = 0;
			while (i < 10) {
				A_SpawnItemEx("PostalExplosionSmoke", FRandom(-52.5, 52.5), FRandom(-52.5, 52.5), FRandom(10, 52.5), FRandom(-12.5, 12.5) * RandomPick(0.0, 0.1), FRandom(0.1, 0.1) * RandomPick(-1, 1), FRandom(0.0, 0.1), 0, SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEANGLE | SXF_ABSOLUTEVELOCITY, 64);
				i++;
			}
		}
		TNT1 A 8 Bright A_Explode;
		TNT1 A 0
		{
			int i = 0;
			while (i < 3) {
				vector3 poss = (frandom(-8,8),frandom(-8,8),frandom(-8,8));
				let Smoke = Spawn("PostalSmokeTrail", pos+poss);
				if (Smoke)
				{	
					Smoke.vel = (frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(-0.3,0.3));
					
					let pp = PostalSmokeTrail(Smoke);
					pp.bouncesmoke = true;
					Smoke.Scale = (8.0,8.0);
				}
				i++;
			}
		}
		TNT1 A 6 Bright;
		TNT1 A 4 Bright;
		Stop;
	}
}

// Smoke trail that comes from the Rocket

Class PostalSmokeTrail : PostalActor
{
    bool rrotate, bouncesmoke;
	vector2 randomScale;
	
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		+RANDOMIZE
		Renderstyle "Translucent";
		alpha 0.90;
		scale 1.70;
    }
	
	override void PostBeginPlay() 
	{
		super.PostBeginPlay();
		bSPRITEFLIP = random(0,1);
		rrotate = random(0,1);
		randomScale.x = frandom(1.70, 2.10);
		randomScale.y = randomScale.x;
		
		if (bouncesmoke != true)
			Scale = (randomScale.x, randomScale.y);
		
		int spawn = random(0,2);
		if (spawn == 1)
			SetStateLabel("Variant2");
		if (spawn == 2)
			SetStateLabel("Variant3");
			
		STD_NeverTarget = true;
		STD_NoKillLine = true;
    }
	
	override void Tick()
    {
        Super.Tick();
		
		Scale += (0.05, 0.05);
				
		Alpha -= 0.005;
		if (Alpha <= 0)
			Destroy();
			
		if (rrotate)
			roll += 1;
		else
			roll -= 1;
    }
	states
    {
    Spawn:
        SKKK AAA 5;
        loop;
	Variant2:
		SKKK BBB 5;
		loop;
	Variant3:
		SKKK CCC 5;
		Loop;
    }
}

// Fire trail that comes out from the Rocket when not out of fuel

Class PostalFireTrail : PostalActor
{
    bool rrotate;
	vector2 randomScale;
	
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		+RANDOMIZE
		+BRIGHT
		RenderStyle "Add";
		alpha 0.90;
		scale 1.70;
    }
	
	override void PostBeginPlay() 
	{
		super.PostBeginPlay();
		bSPRITEFLIP = random(0,1);
		rrotate = random(0,1);
		randomScale.x = frandom(0.020, 0.080);
		randomScale.y = randomScale.x;
		roll = frandom(-180,180);
		
		Scale = (randomScale.x,randomScale.y);
		
		STD_NeverTarget = true;
		STD_NoKillLine = true;
    }
	
	override void Tick()
    {
        Super.Tick();
		
		Scale += (0.05, 0.05);
				
		Alpha -= 0.19;
		if (Alpha <= 0)
			Destroy();
			
		if (rrotate)
			roll += 5;
		else
			roll -= 5;
    }
	states
    {
    Spawn:
        FFFF DDD 5 Bright;
        loop;
    }
}