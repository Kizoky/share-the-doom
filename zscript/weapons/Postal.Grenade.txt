class PostGrenade : PostalWeapon
{
	const VelocityMultiplier = 1;
	double VelocityMultiply;
	
	override void Tick()
	{
		Super.Tick();
		if (!owner) return;
	}
	
	Default
	{
		//$Category STD Weapons
		//$Title "Grenade"
		//$Sprite PICKA0
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Grenadium";
		+WEAPON.NOAUTOFIRE;
		Obituary "$PSTL_OB_GRENADE";
		Tag "$PSTL_WP_GRENADE";
		Inventory.PickupMessage "$PSTL_PP_GRENADE";
		+Weapon.NoAlert;
	}
	States
	{
	Ready:
		GREI ABCDEFGHIJKLMNOPQRSTU 9 A_WeaponReady;
		Loop;
	Deselect:
		GRED ABCDEFGHIJKLMNOP 2;
		TNT1 A 0 A_PostalLower();
		Loop;
	Select:
		GRES A 0 A_PostalRaise(0);
		GRES A 0 A_PlaySound("weaponselect1", 7 | 4096);
		GRES ABCDEFGHIJKLMNOPQRST 2 A_WeaponReady;
		GREI A 0 A_PostalRaise(1);
		Loop;
	Fire:
		GREF A 0 A_StartSound("grenade/pullpin", CHAN_WEAPON, CHAN_NOSTOP);
		GREF ABCDEFGHIJKLMNOPQR 3; 
		Goto HoldFireInit;
	HoldFireInit:
		HOLD ABCDEFGHIJK 3
		{
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				return ResolveState ("FireEnd");
			}
			return ResolveState (null);
		
		}
		Goto HoldFire;
	HoldFire:
		HOLD LMNOPQRSTUVWXYZ 3
		{
			if (invoker.VelocityMultiply <= 29)
				invoker.VelocityMultiply += VelocityMultiplier;
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				return ResolveState ("FireEnd");
			}
			return ResolveState (null);
		}
		HOL2 ABCD 3
		{
			if (invoker.VelocityMultiply <= 29)
				invoker.VelocityMultiply += VelocityMultiplier;
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				return ResolveState ("FireEnd");
			}
			return ResolveState (null);
		}
		Loop;
	FireEnd:
		GRTP A 0 A_StartSound("grenade/fire", CHAN_WEAPON, CHAN_NOSTOP);
		GRTP ABCD 1;
		GRTP E 0
		{
			class<actor> Grenade = "PostalGrenade";
			Actor GGrenade;
			
			// Did the player not hold down Fire?
			// This just helps the Player if they want to just kick the grenade
			// by default this is 0 so unaffected
			double ang = 0;
			if (invoker.VelocityMultiply < 1)
				ang = 15;
			
			// Check if the Player is intentionally trying to toss the Grenade
			// at the ground
			if (invoker.owner.Pitch >= 27)
				GGrenade = A_FireProjectile(Grenade,ang,1,15,-18);
			else
				GGrenade = A_FireProjectile(Grenade,ang,1,15,7);
			
			//Console.Printf("%d",invoker.owner.pitch);
			
			//0 -> -90 looking up
			// 1 -> 90 looking down
			
			if (!GGrenade) return;
			
			// Modify the Grenade's velocity to match with the Player's pitch (where it is looking)
			// unfortunately this is kinda broken, so it will not always work
			// Also a check whether the Player just smashing Fire and letting the Grenade to go without
			// holding down the weapon
			
			GGrenade.A_Recoil(-invoker.VelocityMultiply);
			if (invoker.owner.Pitch >= 27)
			{
				GGrenade.vel.z -= invoker.VelocityMultiply/2.5;
				if (invoker.VelocityMultiply >= 1)
					GGrenade.vel.z -= invoker.owner.Pitch/5;
			}
			else
			{
				GGrenade.vel.z += invoker.VelocityMultiply/2.5;
				if (invoker.VelocityMultiply >= 1)
					GGrenade.vel.z -= invoker.owner.Pitch/5;
			}
			
			invoker.VelocityMultiply = 0;
		}
		GRTP EFGHIJKLM 2;
		Goto Ready;
	AltFire:
		GRTS ABCDEFGH 2;
		GRTS H 0
		{
			class<actor> Grenade = "PostalGrenade";
			Actor GGrenade = A_FireProjectile(Grenade,0,1,4,-7);
			
			if (!GGrenade) return;
			
			let GGGrenade = PostalGrenade(GGrenade);
			if (!GGGrenade) return;
			
			GGGrenade.Minesweeper = true;
			GGGrenade.bTHRUSPECIES = true;
			GGGrenade.Owner = invoker.owner;
		
		}
		GRTS IJKLMN 2;
		Goto Ready;
	Spawn:
		TNT1 A 0;
		PICK A -1;
		Stop;
	}
}

class PostalGrenade : PostalActor
{
	Actor SavedBouncePos, Owner;
	bool Armed, Minesweeper, SoundPlayed;
	int TimeBeforeDestruction;
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		// Spawn initially a last bounce spot, obviously just to stop the Grenade to arm immediately
		SavedBouncePos = spawn("PostalGrenadeHelper", pos);
		
		STD_NeverTarget = true;
		STD_NoKillLine = true;
		
		//Console.Printf("X: %f | Y: %f | Z: %f", vel.x, vel.y, vel.z);
	}
	
	override void Tick()
	{
		Super.Tick();
		if (level.time > TimeBeforeDestruction && Armed && !Minesweeper)
		{
			// Setting these flags to false will force the Grenade to explode on any impact
			bBOUNCEONWALLS = false;
			bBOUNCEONFLOORS = false;
			bBOUNCEONCEILINGS = false;
		}
		
		// For Minesweeping grenades, see Touch below
		if (Armed && Minesweeper)
			bSPECIAL = true;
		
		// Continously decrease Z velocity
		if (!Armed) vel.z -= 0.1;
	}
	
	override void Touch(Actor toucher)
	{
		if (Armed && Minesweeper && toucher)
		{
			if (toucher == Owner && Owner != null)
			{
				// Destroys and spawns a Grenade weapon
				Actor NewGrenade = spawn("PostGrenade", self.pos);
				NewGrenade.angle = angle;
				Destroy();
			}
		}
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (source is 'PostalDude')
		{
			let player = PostalDude(source);
			
			// Let's check if the damage is from the Player's kick
			if (player && player.FindInventory("PostKick"))
			{
				// Make the angle match to the Player's so the Grenade will not move towards the Player
				// Also thrust it and set it's velocity z simulating a kick
				angle = player.angle;
				A_Recoil(-0.25);
				vel.z = 7;
				// in Postal 2 the Grenade will continue to emit that weird smoke trail if you kick it and it's been armed
				Armed = false;
				
				health += damage;
			}
			
		}
		
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}
	
	Default
	{
		Species "Minesweeper";
		Radius 13;
		Height 15;
		Speed 5;
		Damage 20;
		Projectile;
		Health 5;
		+RANDOMIZE
		+DEHEXPLOSION
		//+ROLLSPRITE
		-NOBLOCKMAP
		-NOGRAVITY
		+NOTARGETSWITCH
		//+ABSMASKPITCH
		+SHOOTABLE
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+DONTBOUNCEONSKY
		+USEBOUNCESTATE
		+NOBLOOD
		Gravity 0.27;
		BounceFactor 0.66;
		BloodType "null";
		WallBounceFactor 0.66;
		//SeeSound "";
		DeathSound "other/mute";
		//BounceSound "";
		Obituary "$OB_MPROCKET";
	}
	States
	{
	Spawn:
		GREN A 1
		{
			if (Armed) return;
			// If it's on the ground stop making smoke trail
			if (pos.z ~== floorz) return;
			
			int i = 0;
			while (i < 10) {
				vector3 poss = (frandom(-1,1),frandom(-1,1),frandom(-1,1));
				let Grenade = Spawn("PostalGrenadeTrail", pos+poss);
				if (Grenade)
				{	
					Grenade.vel = (frandom(-0.1,0.1),frandom(-0.1,0.1),frandom(-0.1,0.1));
				}
				i++;
			}
		
		}
		Loop;
	Bounce:
		GREN A 0
		{
			if (Armed) return;
			
			// If the Distance is far-far from the previous bounce
			// todo: Maybe Distance3D instead?
			if (Distance2D(SavedBouncePos) >= 2.0)
				A_StartSound("grenade/bounce");
			
			if (Distance2D(SavedBouncePos) >= 1.0)
			{
				// stub
			}
			else
			{
				// Distance is too close to previous bounce, Arm the grenade so it will stop making bouncing sounds
				// Also stop the Grenade completely
				vel.xy = (0,0);
				Armed = true;
				
				// Arm the Grenade, except minesweeping ones
				if (!Minesweeper)
					TimeBeforeDestruction = level.time + (35 * 3);
			}
			
			// Destroys and creates a new actor when it bounced
			// I don't know if there's any other way to do this, but I found this to be the easiest
			SavedBouncePos.Destroy();
			SavedBouncePos = spawn("PostalGrenadeHelper", pos);
		}
		Goto Spawn;
	Death:
		TNT1 A 0
		{
			A_Quake(5,15,0,800);
			
			// If it's in the air, the grenade will play the Rocket's explode sound. Yes, like in Postal 2.
			// otherwise play the Ground explosion sound.
			if (pos.z > floorz)
				A_StartSound("weapons/rocket_explode", CHAN_WEAPON, CHAN_NOSTOP);
			else // Ground
				A_StartSound("grenade/explode", CHAN_WEAPON, CHAN_NOSTOP);
			
			int i = 0;
			while (i < 10) {
				vector3 poss = (frandom(-52.5, 52.5), frandom(-52.5, 52.5),frandom(10, 52.5));
				let Smoke = Spawn("PostalExplosionSmoke", pos+poss);
				if (Smoke)
				{
					Smoke.vel = (frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(-0.3,0.3));
				}
				i++;
			}
		}
		TNT1 A 8 Bright A_Explode;
		TNT1 A 0
		{	
			int i = 0;
			while (i < 3) {
				vector3 poss = (frandom(-8,8),frandom(-8,8),frandom(-8,8));
				let Smoke = Spawn("PostalSmokeTrail", pos+poss);
				if (Smoke)
				{	
					Smoke.vel = (frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(-0.3,0.3));
					
					let pp = PostalSmokeTrail(Smoke);
					pp.bouncesmoke = true;
					Smoke.Scale = (8.0,8.0);
				}
				i++;
			}
		}
		TNT1 A 6 Bright;
		TNT1 A 4 Bright;
		Stop;
	}
}

Class PostalGrenadeTrail : PostalActor
{
    bool rrotate;
	vector2 randomScale;
	
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		+RANDOMIZE
		+NOBLOCKMAP
		Renderstyle "Translucent";
		alpha 0.90;
		scale 0.40;
    }
	
	override void PostBeginPlay() 
	{
		super.PostBeginPlay();
		bSPRITEFLIP = random(0,1);
		rrotate = random(0,1);
		randomScale.x = frandom(0.40, 0.80);
		randomScale.y = randomScale.x;
		
		Scale = (randomScale.x, randomScale.y);
		
		STD_NeverTarget = true;
		STD_NoKillLine = true;
    }
	
	override void Tick()
    {
        Super.Tick();
		
		Scale -= (0.01, 0.01);
				
		Alpha -= 0.04;
		if (Alpha <= 0)
			Destroy();
			
		if (rrotate)
			roll += 1;
		else
			roll -= 1;
    }
	states
    {
    Spawn:
        SKKK AAA 5;
        loop;
    }
}

class PostalGrenadeHelper : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Speed 0;
		+NOGRAVITY
		+NOINTERACTION
		+NOBLOCKMAP
		-SHOOTABLE
	}
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
	}
}


class Grenadium : Ammo
{
	Default
	{
		Inventory.PickupMessage "Devtest: Grenadirus";
		Inventory.Amount 1;
		Inventory.MaxAmount 200;
		Ammo.BackpackAmount 10;
		Ammo.BackpackMaxAmount 400;
		Inventory.Icon "CLIPA0";
		Tag "$AMMO_CLIP";
	}
	States
	{
	Spawn:
		PICK A -1;
		Stop;
	}
}