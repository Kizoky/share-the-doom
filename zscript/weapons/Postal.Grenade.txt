class PostGrenade : PostalWeapon
{
	const VelocityMultiplier = 1;
	double VelocityMultiply;
	
	Default
	{
		//$Category STD Weapons
		//$Title "Grenade"
		//$Sprite PICKA0
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Obituary "$PSTL_OB_GRENADE";
		Tag "$PSTL_WP_GRENADE";
		Inventory.PickupMessage "$PSTL_PP_GRENADE";
		+Weapon.NoAlert;
	}
	States
	{
	Ready:
		GREI ABCDEFGHIJKLMNOPQRSTU 9 A_WeaponReady;
		Loop;
	Deselect:
		TNT1 AAAAAAAAAAAAAAA 0 A_Lower;
		GRED ABCDEFGHIJKLMNOP 2;
		Loop;
	Select:
		TNT1 AAAAAAAAAAAAAAA 0 A_Raise;
		TNT1 A 0 A_WeaponOffset(0,32); // Fix "bump" when weapon is selected
		TNT1 A 0 A_PlaySound("weaponselect1", 7 | 4096);
		GRES ABCDEFGHIJKLMNOPQRST 2 A_WeaponReady;
		Loop;
	Fire:
		GREF ABCDEFGHIJKLMNOPQR 3; 
		Goto HoldFireInit;
	HoldFireInit:
		HOLD ABCDEFGHIJK 3
		{
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				return ResolveState ("FireEnd");
			}
			return ResolveState (null);
		
		}
		Goto HoldFire;
	HoldFire:
		HOLD LMNOPQRSTUVWXYZ 3
		{
			invoker.VelocityMultiply += VelocityMultiplier;
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				return ResolveState ("FireEnd");
			}
			return ResolveState (null);
		}
		HOL2 ABCD 3
		{
			invoker.VelocityMultiply += VelocityMultiplier;
			if (!(player.cmd.buttons & BT_ATTACK))
			{
				return ResolveState ("FireEnd");
			}
			return ResolveState (null);
		}
		Loop;
	FireEnd:
		GRTP ABCD 2;
		GRTP E 0
		{
			class<actor> Grenade = "PostalGrenade";
			Actor GGrenade = A_FireProjectile(Grenade,0,1,15,7);
			
			GGrenade.A_Recoil(-invoker.VelocityMultiply);
			GGrenade.vel.z = invoker.VelocityMultiply/2;
			invoker.VelocityMultiply = 0;
		}
		GRTP EFGHIJKLM 2;
		Goto Ready;
	AltFire:
		GRTS ABCDEFGHIJKLMNOP 4;
		TNT1 A 0 A_FireShotgun;
		Goto Ready;
	Spawn:
		TNT1 A 0;
		PICK A -1;
		Stop;
	}
}

class PostalGrenade : Actor
{
	Actor SavedBouncePos;
	bool Armed, Minesweeper;
	int TimeBeforeDestruction;
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		SavedBouncePos = spawn("PostalGrenadeHelper", pos);
	}
	
	override void Tick()
	{
		Super.Tick();
		if (level.time > TimeBeforeDestruction && Armed)
		{
			bBOUNCEONWALLS = false;
			bBOUNCEONFLOORS = false;
			bBOUNCEONCEILINGS = false;
		}
		vel.z -= 0.1;
	}
	
	Default
	{
		Radius 11;
		Height 8;
		Speed 5;
		Damage 20;
		Projectile;
		Health 5;
		+RANDOMIZE
		+DEHEXPLOSION
		//+ROLLSPRITE
		-NOBLOCKMAP
		-NOGRAVITY
		+NOTARGETSWITCH
		//+ABSMASKPITCH
		+SHOOTABLE
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+DONTBOUNCEONSKY
		+USEBOUNCESTATE
		+NOBLOOD
		Gravity 0.27;
		BounceFactor 0.66;
		WallBounceFactor 0.66;
		SeeSound "weapons/rocket_fire";
		DeathSound "weapons/rocket_explode";
		//BounceSound "";
		Obituary "$OB_MPROCKET";
	}
	States
	{
	Spawn:
		GREN A 1
		{
			if (Armed) return;
			
			int i = 0;
			while (i < 10) {
				vector3 poss = (frandom(-1,1),frandom(-1,1),frandom(-1,1));
				let Grenade = Spawn("PostalGrenadeTrail", pos+poss);
				if (Grenade)
				{	
					Grenade.vel = (frandom(-0.1,0.1),frandom(-0.1,0.1),frandom(-0.1,0.1));
				}
				i++;
			}
		
		}
		Loop;
	Bounce:
		GREN A 0
		{
			if (Armed) return;
			
			Console.Printf("%f", Distance2D(SavedBouncePos));
			if (Distance2D(SavedBouncePos) >= 2.0)
				A_StartSound("weapons/rocket_bounce");
			
			if (Distance2D(SavedBouncePos) >= 1.0)
			{
				// stub
			}
			else
			{
				Console.Printf("Slowed down.");
				vel.xy = (0,0);
				Armed = true;
				TimeBeforeDestruction = level.time + (35 * 3);
			}
			
			SavedBouncePos.Destroy();
			SavedBouncePos = spawn("PostalGrenadeHelper", pos);
		}
		Goto Spawn;
	Death:
		TNT1 A 0
		{
			A_Quake(5,15,0,800);
			
			int i = 0;
			while (i < 10) {
				A_SpawnItemEx("PostalExplosionSmoke", FRandom(-52.5, 52.5), FRandom(-52.5, 52.5), FRandom(10, 52.5), FRandom(-12.5, 12.5) * RandomPick(0.0, 0.1), FRandom(0.1, 0.1) * RandomPick(-1, 1), FRandom(0.0, 0.1), 0, SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEANGLE | SXF_ABSOLUTEVELOCITY, 64);
				i++;
			}
		}
		TNT1 A 8 Bright A_Explode;
		TNT1 A 0
		{
			int i = 0;
			while (i < 3) {
				vector3 poss = (frandom(-8,8),frandom(-8,8),frandom(-8,8));
				let Smoke = Spawn("PostalSmokeTrail", pos+poss);
				if (Smoke)
				{	
					Smoke.vel = (frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(-0.3,0.3));
					
					let pp = PostalSmokeTrail(Smoke);
					pp.bouncesmoke = true;
					Smoke.Scale = (8.0,8.0);
				}
				i++;
			}
		}
		TNT1 A 6 Bright;
		TNT1 A 4 Bright;
		Stop;
	}
}

Class PostalGrenadeTrail : PostalActor
{
    bool rrotate;
	vector2 randomScale;
	
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		+RANDOMIZE
		Renderstyle "Translucent";
		alpha 0.90;
		scale 0.40;
    }
	
	override void PostBeginPlay() 
	{
		super.PostBeginPlay();
		bSPRITEFLIP = random(0,1);
		rrotate = random(0,1);
		randomScale.x = frandom(0.40, 0.80);
		randomScale.y = randomScale.x;
		
		Scale = (randomScale.x, randomScale.y);
    }
	
	override void Tick()
    {
        Super.Tick();
		
		Scale -= (0.01, 0.01);
				
		Alpha -= 0.04;
		if (Alpha <= 0)
			Destroy();
			
		if (rrotate)
			roll += 1;
		else
			roll -= 1;
    }
	states
    {
    Spawn:
        SKKK AAA 5;
        loop;
    }
}

class PostalGrenadeHelper : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Speed 0;
		+NOGRAVITY
		+NOINTERACTION
		-SHOOTABLE
	}
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
	}
}