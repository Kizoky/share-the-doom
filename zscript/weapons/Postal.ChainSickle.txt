class PostChainSickle : PostalWeapon
{
	action void A_ChainTryHit()
	{
		FLineTraceData lineData;
		LineTrace(angle,52,pitch,offsetz: height, data: LineData);
		
		if (LineData.HitType == TRACE_HitNone)
		{
			A_PlaySound("weapons/machete_swingmiss", CHAN_WEAPON);
			return;
		}
		
		if (LineData.HitType == TRACE_HitActor)
		{
			if (LineData.HitActor is 'NPCHead')
			{
				A_PlaySound("weapons/machete_slice", CHAN_WEAPON);
				A_ChainHit(50);
				return;
			}
			
			A_PlaySound("weapons/machete_slice", CHAN_WEAPON);
			A_ChainHit(0);
			return;
		}
		
		// Todo bodyparts attack (i.e. limbattack)
		
		if (LineData.HitType == TRACE_HitWall)
		{
			A_PlaySound("weapons/machete_hitwall", CHAN_WEAPON);
			A_ChainHit(0);
			return;
		}
		
		if (LineData.HitType == TRACE_HitFloor || LineData.HitType == TRACE_HitCeiling)
		{
			A_PlaySound("weapons/machete_hitground", CHAN_WEAPON);
			A_ChainHit(0);
			return;
		}
	}
	
	action void A_ChainHit(int extradamage)
	{
		FTranslatedLineTarget t;

		int damage = extradamage + random(14, 18);

		double ang = angle;
		double pitch = AimLineAttack (ang, DEFMELEERANGE, null, 0., ALF_CHECK3D);

		LineAttack (ang, DEFMELEERANGE, pitch, damage, 'Melee', "PostalMeleeHitPuff", LAF_ISMELEEATTACK, t);
	
	}
	
	Default
	{
		//$Category STD Weapons
		//$Title "Chain Sickle"
		//$Sprite PICKA0
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Obituary "$PSTL_OB_MACHETE";
		Tag "$PSTL_WP_MACHETE";
		Inventory.PickupMessage "$PSTL_PP_MACHETE";
		+Weapon.NoAlert;
	}
	States
	{
	Ready:
		MAID ABCDEFGHIJKLMNO 6 A_WeaponReady;
		MAID A 0;
		Goto Ready;
	Deselect:
		TNT1 AAAAAAAAAAAAAAA 0 A_Lower;
		MAHO A 1 Offset(0,0);
		Loop;
	Select:
		TNT1 AAAAAAAAAAAAAAA 0 A_Raise;
		TNT1 A 0 A_WeaponOffset(0,32); // Fix "bump" when weapon is selected
		TNT1 A 0 A_PlaySound("weaponselect1", 7 | 4096);
		PGNS ABCDE 2 A_WeaponReady;
		MAID A 0 A_WeaponReady;
		Loop;
	Fire:
		TNT1 A 0
		{
			int randomfire = random(1,4);
			
			switch(randomfire)
			{
				default: Console.Printf("An error has occurred: PostMachete default case"); break;
				case 1: return ResolveState("Fire1"); break;
				case 2: return ResolveState("Fire2"); break;
				case 3: return ResolveState("Fire3"); break;
				case 4: return ResolveState("Fire4"); break;
			}
			
			return ResolveState(null);
		
		}
		//PGNS A 7 A_ReFire;
	Fire1:
		SWI1 A 0
		{
			A_ChainTryHit();
		
		}
		SWI1 ABCDEF 3;
		MAID A 0 A_ReFire;
		Goto Ready;
	Fire2:
		SWI2 A 0
		{
			A_ChainTryHit();
		}
		SWI2 ABCDE 3;
		MAID A 0 A_ReFire;
		Goto Ready;
	Fire3:
		SWI3 A 0
		{
			A_ChainTryHit();
		
		}
		SWI3 ABCDEFGH 2 ;
		MAID A 0 A_ReFire;
		Goto Ready;
	Fire4:
		SWI4 A 0
		{
			A_ChainTryHit();
		
		}
		SWI4 ABCDEFGHI 2;
		MAID A 0 A_ReFire;
		Goto Ready;
	AltFire:
		MASF ABC 2;
		MASF D 0
		{
			A_PlaySound("weapons/machete_throw", CHAN_WEAPON);
		}
		MASF DEFG 2;
		BLWA G 0 A_FireProjectile("LoreShot");
		Goto Blade.Wait;
	Blade.Wait:
		BLWA GGGGGGGGGGGGG 3
		{
			if (!(player.cmd.buttons & BT_ALTATTACK))
			{
				return ResolveState ("Blade.Catch");
			}
			return ResolveState (null);
			
		
			return ResolveState(null);
		}
		Loop;
	Blade.Catch:
		BLCA A 0 A_PlaySound("weapons/machete_return", CHAN_WEAPON);
		BLCA ABCDEF 3;
		MAID A 0;
		Goto Ready;
		
		
	Blade.Fail:
		EMPT ABCDEF 4;
		TNT1 A 0
		{
			let p = PostalDude(self);
			if (p)
			{
				p.Player.PendingWeapon = p.PlayerData.HolsterWeapon;
				p.Player.ReadyWeapon = p.PlayerData.HolsterWeapon;
			}
			
			let d = Weapon(FindInventory("PostMachete"));
			if (d)
				RemoveInventory(d);
			
			return;
		}
		Goto Ready;
	Spawn:
		TNT1 A 0;
		POST A -1;
		Stop;
	}
}