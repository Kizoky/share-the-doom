class PostM16 : PostalWeapon replaces Chaingun
{
	action int M16DMG()
	{
		int damage = 11 * random[GunShot](1, 3);
		
		return damage;
	}
	
	
	action void A_FireM16()
	{
		if (player == null)
		{
			return;
		}

		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;

			A_StartSound ("weapons/chngun", CHAN_WEAPON);

			State flash = weap.FindState('Flash');
			if (flash != null)
			{
				// Removed most of the mess that was here in the C++ code because SetSafeFlash already does some thorough validation.
				State atk = weap.FindState('Fire');
				State cur = player.GetPSprite(PSP_WEAPON).CurState;
				int theflash = atk == cur? 0:1;
				player.SetSafeFlash(weap, flash, theflash);
			}
		}
		player.mo.PlayAttacking2 ();
		
		// Damage dealt by the M-16
		int damage = M16DMG();
		
		double ang = angle;
		LineAttack(ang, PLAYERMISSILERANGE, BulletSlope(), damage, 'Hitscan', "BulletPuff");
	}
	
	Default
	{
		//$Category STD Weapons
		//$Title "M-16"
		//$Sprite PICKA0
		Weapon.Kickback 100;
		Decal "bulletchip";
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Clip";
		Weapon.BobRangeX 0.7;
		Weapon.BobRangeY 0.5;
		Obituary "$PSTL_OB_M16";
		Tag "$PSTL_WP_M16";
		Inventory.PickupMessage "$PSTL_PP_M16";
		PostalWeapon.STD_Gun true;
	}
	States
	{
	Ready:
		MGID ABCDEFGHIJKLMNOPQRSTU 7 A_WeaponReady;
		Loop;
	Deselect:
		MGST QPONMLKJIHGFEDCBAA 1 A_Lower;
		Loop;
	OldDeselect: //GZDoom crashes because this sprite is not defined in modeldef, and since i don't want to remove it from the modeldef I'll do this like this
	    MGDT ABC 1;
		Loop;
	Select:
		MGST A 0 A_PostalRaise(0);
		MGST A 0 A_PlaySound("weaponselect2", 7 | 4096);
		MGST ABCDEFGHIJKLMNOPQQ 1 A_WeaponReady;
		MGID A 0 A_PostalRaise(1);
		Loop;
	Fire:
		MGFE A 0 A_SetPitch(pitch-0.50);
		MGFE A 3 { A_FireM16(); } // ABCDEFGHIJKLMNOP
		MGFE NOP 3 A_ReFire;
		MGID A 0 A_SetPitch(pitch+0.50);
		Goto Ready;
	Flash:
		//PGNS B 3 Offset(0, 0) Bright A_Light2;
		//PGNS A 2 Offset(0, 0) Bright A_Light1;
		Goto LightDone;
	Spawn:
		TNT1 A 0;
		PICK A -1;
		Stop;
	}
}