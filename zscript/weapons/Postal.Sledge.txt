class PostSledge : PostalWeapon
{
	action void A_SledgeTryHit()
	{
		FLineTraceData lineData;
		LineTrace(angle,52,pitch,offsetz: height, data: LineData);
		
		if (LineData.HitType == TRACE_HitNone)
		{
			A_PlaySound("weapons/hammer_swingmiss", CHAN_WEAPON);
			return;
		}
		
		if (LineData.HitType == TRACE_HitActor)
		{
			if (LineData.HitActor is 'NPCHead')
			{
				A_PlaySound("weapons/hammer_bodyhit", CHAN_WEAPON);
				A_SledgeHit(LineData.HitActor.Health);
				return;
			}
			
			A_PlaySound("weapons/hammer_bodyhit", CHAN_WEAPON);
			A_SledgeHit(0);
			return;
		}
		
		// Todo bodyparts attack (i.e. limbattack)
		
		if (LineData.HitType == TRACE_HitWall)
		{
			A_PlaySound("weapons/hammer_hitwall", CHAN_WEAPON);
			A_SledgeHit(0);
			return;
		}
		
		if (LineData.HitType == TRACE_HitFloor || LineData.HitType == TRACE_HitCeiling)
		{
			A_PlaySound("weapons/scythe_hitground", CHAN_WEAPON);
			A_SledgeHit(0);
			return;
		}
	}
	
	action void A_SledgeHit(int extradamage)
	{
		FTranslatedLineTarget t;

		int damage = extradamage + random(14, 18);

		double ang = angle;
		double pitch = AimLineAttack (ang, DEFMELEERANGE, null, 0., ALF_CHECK3D);

		LineAttack (ang, DEFMELEERANGE, pitch, damage, 'Melee', "PostalMeleeHitPuff", LAF_ISMELEEATTACK, t);
	
	}
	
	bool HitGroundOnce;
	
	override void Tick()
	{
		Super.Tick();
		
		if (owner) return;
		
		if (pos.z == floorz && HitGroundOnce != true)
		{
			A_PlaySound("weapons/hammer_hitground", CHAN_WEAPON);
			HitGroundOnce = true;
		}
	}
	
	Default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Obituary "$OB_MPSHOTGUN";
		Inventory.PickupMessage "Picked up a sledgehammer.";
		+Weapon.NoAlert;
	}
	States
	{
	Ready:
		TNT1 A 1
		{
			cvar idlinganimcvar = cvar.findcvar('postal_idleanim');
			bool idlinganim = (idlingAnimCVar != null && idlingAnimCVar.GetBool ());
			
			if (idlinganim)
				return ResolveState ("Ready.IdleAnim");
			else
				return ResolveState ("Ready.NoIdleAnim");
			
			return ResolveState (null);
		}
		Loop;
	Deselect:
		TNT1 AAAAAAAAAAAAAAA 0 A_Lower;
		SLED ABCD 2;
		Loop;
	Ready.IdleAnim:
		POHI ABCDEFGHIJKLMNO 7 A_WeaponReady;
		POHI A 0 A_WeaponReady;
		Goto Ready;
	Ready.NoIdleAnim:
		POHI A 1 A_WeaponReady;
		Goto Ready;
	Select:
		TNT1 AAAAAAAAAAAAAAA 0 A_Raise;
		TNT1 A 0 A_WeaponOffset(0,32); // Fix "bump" when weapon is selected
		TNT1 A 0 A_PlaySound("weaponselect5", 7 | 4096);
		POHS ABCDEF 2 A_WeaponReady;
		Goto Ready;	
	Fire:
		POH2 ABCDEFGHIJKL 3;
		Goto FireHold;
	FireHold:
		POH2 W 3
		{
			if (!(player.cmd.buttons & BT_ATTACK))
				return ResolveState ("FireFinish");
				
			return ResolveState (null);
		}
		Loop;
	FireFinish:
		SHOO AB 2;
		SHOO C 0 A_SledgeTryHit();
		SHOO CDEF 2;
		Goto Ready;
	AltFire:
		SLES ABC 4;
		Goto AltFireHold;
	AltFireHold:
		SLES C 4
		{
			if (!(player.cmd.buttons & BT_ALTATTACK))
				return ResolveState ("AltFireFinish");
				
			return ResolveState (null);
		}
		Loop;
	AltFireFinish:
		SHO2 A 0
		{
			A_PlaySound("weapons/hammer_throw", CHAN_WEAPON);
			
			class<actor> Hammer = "ThrownHammer";
			Actor HammerShoot = SpawnPlayerMissile(Hammer);
		
		}
		SHO2 ABCDE 3;
		TNT1 A 0
		{
			let p = PostalDude(self);
			p.Player.PendingWeapon = p.PlayerData.HolsterWeapon;
			p.Player.ReadyWeapon = p.PlayerData.HolsterWeapon;
			
			let d = Weapon(FindInventory("PostSledge"));
			RemoveInventory(d);
			
			return;
		}
		Goto Ready;
	Spawn:
		TNT1 A 0;
		POST A -1;
		Stop;
	}
}

class ThrownHammer : Actor
{	

	override void Tick()
	{
		Super.Tick();
		
		if (BounceCount == 1)
		{
			A_SpawnItemEx("PostSledge");
			Destroy();
		}
	
	}
	
	Default
	{
		Scale 2.5;
		Speed 7;
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		BounceCount 2;
		BounceSound "weapons/hammer_hitwall";
		SeeSound "";
		DeathSound "weapons/hammer_hitground";
		Projectile;
		+RANDOMIZE
		+INTERPOLATEANGLES
		Scale 1.2;
		Damage 1;
	}
  States
  {
  Spawn:
    THRO AA 6 Bright
	{
		A_PlaySound("weapons/hammer_throwloop", CHAN_WEAPON);
		
		Actor Woosh = SpawnPlayerMissile("Postal_Woosh");
		if (Woosh)
		{
			let pp = Postal_Woosh(Woosh);
			pp.Entity = self;
			pp.bFLATSPRITE = false;
			//pp.ScaleX = 2.5;
			//pp.ScaleY = 2.5;
			
		}
	}
	Loop;
  Death:
	TNT1 A 0 A_SpawnItemEx("PostSledge");
    Stop;
  }
}