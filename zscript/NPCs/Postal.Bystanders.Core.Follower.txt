
class NPCFollower : NPCCore
{

	bool gotMyOwnPlayer;
	Actor MyPlayer, SavedTarget;
	
	
	
	override void NPC_Settings()
	{
		//Sounds are defined here for NPCs
		NPC_Scream = "male1/scream";
		NPC_Bump = "mikej/bump";
		NPC_PetitionDeny = "noway";
		NPC_Dickout = "mikej/dickout";
		
		//Walking styles are randomized, but you can set it manually if wanted
		WalkingStyle = random(1,6);
		
		//Spawn head hitbox
		
		/*if (!(self is 'NPCKrotchy'))
		{
			class<actor> Head = "NPCHead";
			Actor MyHead = spawn(Head, self.pos, ALLOW_REPLACE);
			if (MyHead)
			{
				MyHead.Angle = self.Angle;
				let p = NPCHead(MyHead);
				p.Owner = self;
			}
		}*/
		
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		UniqueID = random(1,999999);
		isAfterTarget = false;
		
		////// 1 = Pussy; will shriek in whatever occusion
		////// 2 = Hostile; has a weapon, and will attack back if provoked
		////// 3 = Ally; ignores the player, will attack back if a certain amount of HP was lost because of the Player
		////// 4 = Companion; Same as like ally, with the exception that it will follow the Player on sight, and won't attack it no matter what
		
		Hostility = "Companion";
		
		if (Hostility == "Companion")
		{
			int RandomizedWeapon = random(1,2);
			
			switch(RandomizedWeapon)
			{
				default:
					Console.Printf("Warning, weapon for a Hostile NPC hasn't been set!");
					Destroy();
					break;
				case 1:
					NPCWeapon = "Shotgun";
					break;
				case 2:
					NPCWeapon = "Shotgun";
					break;
			
			}
		}
		
		NPC_Settings();
		
		NPCWeapon = "Shotgun";
		
	}
	
	override void Tick()
	{
		Super.Tick();
		
		if (MyPlayer != null && isBusy != true && isAfterTarget != true)
		{
			if (Distance2D(MyPlayer) > 125)
			{
				Angle = AngleTo(MyPlayer);
			}
				else
					vel.xy = (0,0);
			Console.Printf("%d > 125", Distance2D(MyPlayer));
		}
		
		if (target is 'NPCFollower')
		{
			let pp = NPCFollower(target);
			if (pp.MyPlayer == MyPlayer)
			{
				bFRIENDLY = true;
				A_ClearTarget();
				isAfterTarget = false;
				isBusy = false;
				Speed = Default.Speed;
				bFRIENDLY = false;
				SetStateLabel("Spawn");
			}
		}
		
		if (target is 'PostalDude')
		{
			bFRIENDLY = true;
			A_ClearTarget();
			isAfterTarget = false;
			isBusy = false;
			Speed = Default.Speed;
			bFRIENDLY = false;
			SetStateLabel("Spawn");
		}
	}
	
	override void A_PostalTarget()
	{
		//The AI in Postal 2 is stupid, so we'll make a countdown later, after that the bool will get resetted
		//And if it sees a corpse again, it will start all over again
		//the hasSeenCorpse just prevents clearing the target
		
		if (target != null && Hostility == "Companion")
		{
			if (target.bKILLED)
			{
				//Console.Printf("Target killed");
				isAfterTarget = false;
				bFRIGHTENED = false;
				//bFRIENDLY = false;
				Speed = Default.Speed;
				A_ClearTarget();
				isBusy = false;
				SetStateLabel("Spawn");
			}
		}
		
	}
	
	override void A_PussyScream()
	{
			// stub
	}
	
	override void A_HostileWalk(int variant)
	{
		switch(variant)
		{
			default:
				Console.Printf("Warning, HostileWalk variant hasn't been set for an NPC!");
				Destroy();
				break;
			case 1:
				A_PostalTarget();
				//A_ConcentratedTarget();
				A_Recoil(-0.35);
				A_Chase(flags: CHF_STOPIFBLOCKED);
				break;
			case 2:
				A_PostalTarget();
				//A_ConcentratedTarget();
				A_Recoil(-0.35);
				A_Chase();
				break;
		}
	}
	
	override void A_ConcentratedTarget()
	{
		if (MyTarget)
		{
			target = MyTarget;
		}
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (source is 'PostalDude' && inflictor is 'Urine')
		{
			SetStateLabel("Debug");
			gotPissedOn = true;
			Console.Printf("Got em!");
			Health += damage;
		}
		
		if (source is 'PostalDude' || source is 'NPCFollower')
		{
			A_ClearTarget();
			Health += damage;
		}
		
		if (inflictor is 'Bulletpuff')
		{
			//Console.Printf("Clip clip clip");
			A_PlaySound("hitflesh",0 | 4096);
		}
		
		if (inflictor is 'fakeTrainCollision')
		{
			Thrust(20);
			A_DamageSelf(Health);
			//p.SetStateLabel("Headless.Death");
			//SetStateLabel("Headless.Death");
			
		}
		
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}
	
	Default
	{
		//$Category NPCs
		//$Title "Debug Dude"
		//$Sprite DUDEA0
		Health 150;
		Radius 13;
		Height 65;
		Speed 0;
		PainChance 256;
		Monster;
		+INTERPOLATEANGLES
		SeeSound "";
		Species "Followers";
		AttackSound "weapons/pistol";
		PainSound "dudehurt";
		DeathSound "dudehurt16";
		ActiveSound "";
		Obituary "%o was somehow got killed by a Bystander. What, how is that possible??";
		DropItem "None";
		+NOTARGETSWITCH;
		+SOLID
		+SHOOTABLE
		+DROPOFF
		+PICKUP
		+NOTDMATCH
		-FRIENDLY
		+SLIDESONWALLS
		+CANPASS
		+CANPUSHWALLS
		+FLOORCLIP
		+WINDTHRUST
		+TELESTOMP
		+NOBLOCKMONST
		+SPECIAL
		+AVOIDMELEE
		+ALLOWPAIN
		-COUNTKILL
		+NOINFIGHTSPECIES
		-QUICKTORETALIATE
		-HARMFRIENDS
		-DOHARMSPECIES
	}
	States
	{
	Petitioning:
		TNT1 A 0
		{
			isBusy = true;
			if (PetitionNumber != 3)
				PetitionNumber++;
				
			A_FaceTarget();
		}
		DUDE ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 A_FaceTarget();
		DUDE ABCDEFGHIJKLMNOP 3 A_FaceTarget();
		TNT1 A 0 A_PlaySound(NPC_PetitionDeny,0);
		PINK ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 A_FaceTarget();
		TNT1 A 0
		{
			//Clear our target, so we won't be going after it
			isBusy = false;
			Petitioning = false;
			A_ClearTarget();
		}
		TNT1 A 0 ACS_Execute(1003,0);
		Goto Spawn;
	Debug:
		DUDE ABCDEFGHIJKLMNOPQRSTUVWXYZ 3
		{
			angle += 35;
		}
		Loop;
	Spawn:
		TNT1 A 0
		{
			if (MyPlayer != null)
			{
				if (Distance2D(MyPlayer) < 125)
				{
					SetStateLabel("Standing");
				}
			}
			
			A_BystanderNode();
			
		}
		DUDW ABCD 3
		{
			A_Recoil(-0.35);
			A_Wander(flags: CHF_STOPIFBLOCKED);
			if (Petitioning == true)
				SetStateLabel("Petitioning");
			A_BystanderNode();
		}
		//TNT1 A 0 A_BystanderNode();
		DUDW EFGH 3
		{
			A_Recoil(-0.35);
			A_Wander(flags: CHF_STOPIFBLOCKED);
			A_BystanderNode();
		}
		TNT1 A 0 A_FollowerThink();
		DUDW IJKL 3
		{
			A_Recoil(-0.35);
			A_Wander(flags: CHF_STOPIFBLOCKED);
			A_BystanderNode();
		}
		//TNT1 A 0 A_BystanderNode();
		DUDW MNOPQR 3
		{
			A_Recoil(-0.35);
			A_Wander(flags: CHF_STOPIFBLOCKED);
			A_BystanderNode();
		}
		Loop;
	Running:
		RUNN ABCDEFGHI 3
		{
			if (MyPlayer != null)
			{
				if (Distance2D(MyPlayer) < 125)
				{
					SetStateLabel("Standing");
				}
			}
			
			//A_Wander(flags: CHF_STOPIFBLOCKED);
			A_Recoil(-0.60);
			A_BystanderNode();
		}
		TNT1 A 0 A_FollowerThink();
		Loop;
	Standing:
		TNT1 A 0
		{
			int randomm = random(1,2);
			
			if (randomm == 2)
				angle = random(1, 360);
		}
		DUDE ABCDEFGHIJKLMNOPQRSTUVWXYZ 2;
		TNT1 A 0 A_FollowerThink();
		DUDE ABCDEFGHIJKLMNOPQRSTUVWXYZ 2;
		Goto Running;
	See:
		DUDE A 0
		{	
			if (Hostility == "Companion" && isAfterTarget == true)
			{
				Speed = 1;
				SetStateLabel("HostileChase");
				//bFRIENDLY = TRUE;
				
				//A_ConcentratedTarget();
				
			}
		}
	HostileChase:
		TNT1 A 0
		{	
			//A_ConcentratedTarget();
			
			if (target is 'PostalDude' || target is 'NPCFollower')
			{
				if (SavedTarget != null)
					target = SavedTarget;
				else
				{
					A_ClearTarget();
					isAfterTarget = false;
					isBusy = false;
					SetStateLabel("Spawn");
				}
			}
			
			
			if (NPCWeapon == "Pistol")
				SetStateLabel("HostileChase.Pistol");
			if (NPCWeapon == "Shotgun")
				SetStateLabel("HostileChase.Shotgun");
		
		}
	HostileChase.Pistol:
		XXXX ABCDEFGHIJKLMNOPQ 2 A_HostileWalk(1);
		XXXX ABCDEFGHIJKLMNOPQ 2 A_HostileWalk(2);
		Loop;
	HostileChase.Shotgun:
		SHOT ABCDEFGHIJKLMNOPQRSTU 2 A_HostileWalk(1);
		SHOT ABCDEFGHIJKLMNOPQRSTU 2 A_HostileWalk(2);
		Loop;
	Missile:
		TNT1 A 0
		{
			//A_ConcentratedTarget();
			
			if (Hostility == "Companion" && isAfterTarget == true)
			{
				if (NPCWeapon == "Pistol")
					SetStateLabel("Missile.Pistol");
				if (NPCWeapon == "Shotgun")
					SetStateLabel("Missile.Shotgun");
			}
		}
	Missile.Pistol:
		TNT1 A 0 { vel.xy = (0,0); }
		XXXF A 10 A_FaceTarget;
		TNT1 A 0 A_PostalTarget();
		XXXF A 6 A_NPCPistolAttack();
		XXXF A 8;
		Goto HostileChase.Pistol;
	Missile.Shotgun:
		TNT1 A 0 { vel.xy = (0,0); }
		SHOF A 10 A_FaceTarget;
		TNT1 A 0 A_PostalTarget();
		SHOF A 6 A_NPCShotgunAttack();
		SHOF A 4;
		TNT1 A 0 A_PlaySound("weapons/shotgr", CHAN_WEAPON);
		SHOF A 6;
		Goto HostileChase.Shotgun;
	Pain:
		DUDE A 3 A_Pain;
		Goto See;
	Bumping:
		TNT1 A 0 A_PlaySound(NPC_Bump,0);
		DUDE ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 { target = MyTarget; A_FaceTarget(); }
		
		TNT1 A 0
		{
			//Clear our target, so we won't be going after it
			isBusy = false;
			A_ClearTarget();
		}
		Goto Spawn;
	DickOut:
		TNT1 A 0 A_PlaySound(NPC_Dickout,0);
		DUDE ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 { target = MyTarget; A_FaceTarget(); }
		DUDE ABCDEFGHIJKLMNOPQRSTUVWXYZ 2 { target = MyTarget; A_FaceTarget(); }
		
		TNT1 A 0
		{
			//our target is the Player always in this state
			let PlayerDude = PostalDude(target);
			
			//Check if Player's onscreen weapon is Urethra, pretty self explanatory
			if (PlayerDude.Player.ReadyWeapon == PlayerDude.PlayerData.UrethraWeapon)
			{
				isBusy = false;
				A_ClearTarget();
				SetStateLabel("Spawn");
			}
			else
			{
				isBusy = false;
				A_ClearTarget();
			}
			//Although this may never happen (or can if the Player suddenly zipped it's pants), we don't want to make nasty mistakes.
			isBusy = false;
		}
		Goto Spawn;
	StaringWeapon:
		DUDE ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 { target = MyTarget; A_FaceTarget(); }
		//Be hostile, or flee from the frightening Player
		TNT1 A 0 { isAfterTarget = true; A_PlaySound(NPC_Taunt,0); }
		Goto See;
	StaringNPC:
		TNT1 A 0 
		{
			let pp = NPCCore(MyTarget);
			
			//If the Unique ID attached to the corpse is the same in our deadpeople array, then forget about it
			//If this is the first time then just assign the element of deadpeople to the corpse's element
			//so the NPC will always ignore it, that is if it's a Hostile-type NPC
			
			if (pp)
			{
			
				if (deadpeople[pp.UniqueID] == pp.UniqueID && Hostility == "Hostile")
				{
					SetStateLabel("Spawn");
				}
				else
				{
					deadpeople[pp.UniqueID] = pp.UniqueID;
					hasSeenCorpse = true;
				}
			}
			
		}
		DUDE ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 { target = MyTarget; A_FaceTarget(); }
		TNT1 A 0 
		{
			//Grab the target's variables
			let pp = NPCCore(target);
			//Console.Printf("NPCCore let pp");
			
			//If the NPC's (not target's) Hostility is 0
			if (isBusy == true)
			{
				if (target is 'NPCCore')
				{
					//Console.Printf("Hostility 0 yada yada");
					//If target's Hostility is 2 (Hostile)
					let pp = NPCCore(target);
					if (pp.Hostility == "Hostile")
					{
							let pp = NPCCore(target);
							//Console.Printf("NPCCore is my target");
							//Console.Printf("HE'S GOT A GUN!!!");
							if (Hostility == "Hostile")
							{
								target = pp;
								isBusy = false;
								A_PlaySound(NPC_Taunt,0);
								isAfterTarget = true;
								SetStateLabel("See");
							}
							else
							{
								if (Hostility == "Pussy")
								{
									target = pp;
									isBusy = false;
									isAfterTarget = true;
									SetStateLabel("See");
								}
							}
					}
				}
			}
		}
		Goto See;
	Death:
		TNT1 A 0 A_Scream;
		DUDD ABCDEFGHIJKLMNOPQRSTUVWXYZ 2;
		TNT1 A 0
		{
			if (NPCWeapon == "Pistol")
				A_SpawnItemEx("PostPistol");
			if (NPCWeapon == "Shotgun")
				A_SpawnItemEx("PostShotgun");
		
		}
		TNT1 A 0 A_NoBlocking;
		DUD2 ABCDEFGHIJKLMNOP 2;
		DUD2 P -1;
		Stop;
	Headless.Death:
		TNT1 A 0 A_Scream;
		XYXY ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
		TNT1 A 0
		{
			if (NPCWeapon == "Pistol")
				A_SpawnItemEx("PostPistol");
			if (NPCWeapon == "Shotgun")
				A_SpawnItemEx("PostShotgun");
		
		}
		TNT1 A 0 A_NoBlocking;
		XYX2 ABCDEFGHIJKLMNOP 2;
		XYX2 P -1;
		Stop;
	XDeath:
		TNT1 A 0 A_Scream;
		DUDD ABCDEFGHIJKLMNOPQRSTUVWXYZ 2;
		TNT1 A 0
		{
			if (NPCWeapon == "Pistol")
				A_SpawnItemEx("PostPistol");
			if (NPCWeapon == "Shotgun")
				A_SpawnItemEx("PostShotgun");
		
		}
		TNT1 A 0 A_NoBlocking;
		DUD2 ABCDEFGHIJKLMNOP 2;
		DUD2 P -1;
		Stop;
	Raise:
		Stop;
	}
}

extend class NPCFollower
{	
	//////////////////////////////////
	/////// Bump/Touch feature
	//////////////////////////////////
	
	override void Touch(Actor toucher)
	{
		if (toucher)
		{
			//If we aren't staring, nor we have more than 0 HP, or we aren't hostile atm, do:
			//Checking for 0 HP is needed because we don't want to resurrect dead NPCs into Ghost ones that are unkillable
			if (isAfterTarget != true && health > 0 && isBusy != true)
			{
				// If our target is another NPCCore, then do the following
				if (toucher is 'NPCCore' && isAfterTarget != true)
				{
						let pp = NPCCore(toucher);
						//If we aren't Hostile or Fleeing, do:
						//Calm, normal wandering/walking
						if (pp.isAfterTarget == false)
						{
							if (StopGoingAfterNode != true)
							{
								NodeCooldown = level.time;
								StopGoingAfterNode = true;
								ActiveNode = null;
							}
						}
						else
						{
							//Fleeing, running around and screaming like hell
							if (pp.Hostility == "Pussy" && pp.isAfterTarget == true)
							{
								//Console.Printf("STOP RUNNING INTO ME YOU SCREAMING PUSSY");
								A_FaceTarget();
								target = pp;
								MyTarget = pp;
								isBusy = true;
								SetStateLabel("Bumping");
							}
							else
							{
								//Hostile, attacks the target
								//If we aren't fleeing or Hostile, do:
								if (isAfterTarget != true)
								{
								
									if (pp.Hostility == "Hostile" && pp.isAfterTarget == true)
									{
										//Console.Printf("HE'S GOT A GUN!!!");
										if (Hostility == "Hostile")
										{
											target = pp;
											MyTarget = pp;
											isAfterTarget = true;
											A_PlaySound(NPC_Taunt,0);
											SetStateLabel("HostileChase");
										}
										else
										{
											if (Hostility == "Pussy")
											{
												isAfterTarget = true;
												target = pp;
												MyTarget = pp;
												SetStateLabel("See");
											}
										}
										
									}
								
								}
							}
						}
				}
				
				if (toucher is 'Champ' && isAfterTarget != true)
				{
					SetStateLabel("Spawn");
				}
				
				if (toucher is 'PostalCatInv' && isAfterTarget != true)
				{
					SetStateLabel("Spawn");
				}
				
				if (toucher is 'CowMike' && isAfterTarget != true)
				{			
					if (Hostility == "Hostile")
					{
						target = toucher;
						MyTarget = toucher;
						isAfterTarget = true;
						A_PlaySound(NPC_Taunt,0);
						SetStateLabel("HostileChase");
					}
					else
					{
						if (Hostility == "Pussy")
						{
							isAfterTarget = true;
							target = toucher;
							MyTarget = toucher;
							SetStateLabel("See");
						}
					}
				
				}
				
			}
			
		}	
	}
	
	//////////////////////////////////
	/////// "See" logic
	//////////////////////////////////
	
	action void A_FollowerThink()
	{
		//many thanks to phantombeta!!
		//double fov = 180; // this should be an argument, variable or constant instead, this is just here as an example
		BlockThingsIterator it = BlockThingsIterator.Create (self, 768); // The number here is (possibly roughly) the maximum distance they can see
		
		while (it.Next ()) {
			let next = it.Thing;

			//if (!next.bShootable) // || next.bKilled || next.health < 1)
			//{
			//	continue;
			//}

			
			//if (AbsAngle (AngleTo (next), angle) > (fov / 2.)) // Not within FOV
			//{
			//	continue;
			//}

			
			if (!CheckSight (next, SF_SeePastShootableLines)) // Not in sight
				continue;

			// Do things with the "next" pointer here
			
							if (next is 'PostalDude' && !(next.bKILLED) && invoker.gotMyOwnPlayer != true)
							{
								let PlayerDude = PostalDude(next);
								invoker.MyPlayer = PlayerDude;
								invoker.gotMyOwnPlayer = true;
							}
							
							if ((next.target == invoker.MyPlayer && invoker.MyPlayer != null) || next.target == self || next.target is 'NPCFollower')
							{
								target = next;
								invoker.SavedTarget = next;
								invoker.isAfterTarget = true;
								SetStateLabel("HostileChase");
							}
						
			}
    }
}