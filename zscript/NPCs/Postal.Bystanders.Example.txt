// This is an example of how you can add custom NPCs
// Note: You don't need to copy states from NPCCore because it will most likely break
// For now you can't really add new custom features because NPCCore (the main actor for NPCs) is not
// code flexible yet, poke me hard enough and I'll get it done!

// Make sure to inherit from NPCCore
// Note: Use the same frames you found from NPCCore to use custom models for this actor
// ./models/modeldef/Bystanders/example.txt
class NPCExample : NPCCore
{
	// This is the only function you can safely override/edit, the other ones are risky (unless there will be more but I don't think so atm)
	// i.e. you should never touch PostBeginPlay(), NPC_Settings is in that
	// Tick() needs to be made more friendly for adding new custom stuff, so that's not safe either
	// Think of this function as an alternative PostBeginPlay(), editing damage, health, calculating, etc. works at spawn
	override void NPC_Settings()
	{
		// Sounds are defined here for NPCs. NOTE FOR BEGINNGERS: Sounds MUST be defined in SNDINFO.txt before you can use them here!
		NPC_Scream = "male1/scream";
		NPC_Bump = "example/bump";
		NPC_PetitionDeny = "noway";
		NPC_Dickout = "example/taunt";
		
		// Played by Hostile NPCs immediately after they go after their target
		NPC_Taunt = "example/taunt";
		
		// Walking styles are randomized, but you can set it manually if wanted
		// Note, currently (18 June) they aren't added into the mod yet
		WalkingStyle = random[mystyle](1,6);
		
		// The pitch of the NPC's voice is randomized
		MyVoice = frandom[voicef](0.7,1.2);
		
		// Spawn head hitbox
		// Note: You MUST set a Headbox for the NPC, otherwise they will die instantly
		// Currently this is hardcoded and there's no way you can't not add Hitbox to the NPC
		class<actor> Head = "NPCHead";
		Actor MyHead = spawn(Head, self.pos, ALLOW_REPLACE);
		if (MyHead)
		{
			MyHead.Angle = self.Angle;
			let p = NPCHead(MyHead);
			if (p)
			{
				p.Owner = self;
				HeadHitbox = p;
			}
		}
		
		// Set hostility and weapon
		// For hostility use:
		// 'Hostile' or 'Pussy', the latter is unarmed Bystander behavior
		// Weapon can be anything you can find in Postal.Bystanders.Core.New.txt at WeaponList[]
		// Note: If wrong data was given, their behavior will be random, unless NPCWeapon was invalid
		// in that case that will be only randomized
		// They aren't case-sensitive so you are free to name it as shotgun, ShotguN, PuSsY, and so on...
		//Hostility = "Hostile";
		
		// You can also randomize the Hostility like this
		Hostility = (random[rndhost](0,1) == 1) ? "Hostile" : "Pussy";
		
		NPCWeapon = "Shotgun";
	}

	bool KrotchyMadness;
	// Put everything here you want to change when the NPC is active, this can be anything
	override void Tick()
	{
		Super.Tick();

		// Champ is our target, we shall die.
		// We must check if "target" pointer is not null, and is not killed, and we aren't dead either!
		// If we don't check if our NPC isn't dead some unforeseen events may happen, and that ain't pretty.
		if (target && target is 'Champ' && !target.bKILLED && !bKILLED)
		{
			A_Die();
		}

		// Now let's do something more fun!
		// If the target is a Player, we shall send dozen of Krotchies at him.
		// Not lethal, but annoyingly cute.
		// Now of course this one is a little bit harder since we don't want the NPC spamming
		// Krotchies non-stop. So we use a boolean called KrotchyMadness found above
		// Important, since in STD sadly we rely on bool checks if a certain NPC is doing something
		// Make sure to always check for "isBusy" and "isAfterTarget"
		if (target && target is 'PostalDude' && !bKILLED && !isBusy && isAfterTarget)
		{
			// if KrotchyMadness isn't initiated yet.
			if (!KrotchyMadness)
			{
				// if the Player isn't killed
				if (!target.bKILLED)
				{
					class<actor> KrotchyToy = "GiantKrotchyToy";
					int NumberOfKrotchies = 0;
					// 11 Krotchies should be enough?
					while (NumberOfKrotchies <= 10)
					{
						// increment the integer so we won't crash GZDoom :)
						NumberOfKrotchies++;
						// Let's randomize the position of the Krotchies..
						// But of course make them spawn in the air!
						vector3 rndpos = (random[x](-25,25), random[y](-25,25), random[z](100,175));
						// Spawn them
						spawn(KrotchyToy, target.pos+rndpos, ALLOW_REPLACE);
					}

					// Let's not forget about setting the boolean to true
					// otherwise the Toy Krotchies would eventually crash GZDoom :)
					KrotchyMadness = true;
				}
				// If the Player was killed somehow
				// Low effort
				else
				{
					Console.Printf("You suck. HAHA!");
					KrotchyMadness = true;
				}
			}

		}

		// Must have, NEVER delete it unless you know what you are doing
		// This is NPCCore's Tick moved onto a function for easier moddability
		NPC_Tick();
	}
	
	Default
	{
		Health 666;
		Radius 12;
		Height 65;
		AttackSound "";
		PainSound "male1/hurt";
		DeathSound "male1/death";
		Obituary "%o should replace this text of string.";
		CameraHeight 59;
		
		// Set this to enable custom Hostility and Weapon
		NPCCore.CustomBehavior true;
	}
}