class NPCZombie : PostalActor
{
	int WalkingStyle;
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (target == null)
		{
			target = source;
			SetStateLabel("See");
		}
		
		int Prob = random(0,100);
		if (Prob > 78)
		{
			A_PlaySound("zombie/pain", 0 , 1.0, false, 1, false);
		}
		
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		WalkingStyle = random(1,2);
	}
	
	override void Tick()
	{
		Super.Tick();
		
		float RotationSpeed = 4;
		
		if (target)
		{
			if (InStateSequence(CurState, ResolveState("WalkOne")) || InStateSequence(CurState, ResolveState("WalkTwo")))
			{
				if(Distance2D(target) < 37)
					SetStateLabel("Melee");
				else
				{
					//int prob = random(0,100);
					//if (prob > 75)
					//	SetStateLabel("Missile");
				}
				
				if (abs (deltaangle (angle, AngleTo (target))) < 7)
				{
					angle = AngleTo (target);
					return;
				}
				
				if (((AngleTo (target)) - angle + 360) % 360 < 180)
				{	
					A_SetAngle(angle+RotationSpeed, SPF_INTERPOLATE);
				}
				else A_SetAngle(angle-RotationSpeed, SPF_INTERPOLATE);
			}
			
			if (InStateSequence(CurState, ResolveState("Charge")))
			{
				if(Distance2D(target) < 37)
					SetStateLabel("Melee");
			}
			
			if (target.bKILLED)
			{
				A_ClearTarget();
				SetStateLabel("Spawn");
			}
			
		}
	
	}
	
	override void Touch(Actor toucher)
	{
		if (target != null) return;
		
		if (toucher)
		{
			if (!(toucher is 'NPCZombie'))
			{
				let PlayerDude = PostalDude(toucher);
				if (toucher == PlayerDude && PlayerDude.PlayerData.P_NoTarget) return;
				
				if (toucher is 'PostalDoor' || toucher is 'PostalDoor_Extender' || toucher is 'PostalFire' || toucher is 'PostalLiquidGas' || toucher is 'RandomPostalFire') return;
				if (toucher is 'CowMike') return;
				
				target = toucher;
				SetStateLabel("See");
			}
		}
	}
	
	action void A_ZombieThink()
	{
		if (target != null) return;
		
		double fov = 90;
		BlockThingsIterator it = BlockThingsIterator.Create (self, 700);
		
		while (it.Next () && it.Thing != null) {
				let next = it.Thing;
				
			if (AbsAngle (AngleTo (next), angle) > (fov / 2.)) continue;
				
			if (!CheckSight (next, SF_SeePastShootableLines)) continue;
			
			if (!(next is 'NPCZombie') && next != self && next.Health > 1)
			{
				if (next is 'PostalDoor' || next is 'PostalDoor_Extender' || next is 'PostalFire' || next is 'PostalLiquidGas' || next is 'RandomPostalFire') return;
				if (next is 'CowMike') return;
				
				let PlayerDude = PostalDude(next);
				if (next == PlayerDude && PlayerDude.PlayerData.P_NoTarget) return;
				
				target = next;
				SetStateLabel("See");
			}
		}
	}
	
	void A_ZombieAttack(int damage)
	{
		let targ = target;
		if (targ && CheckMeleeRange())
		{
			//Zombies seem to only deal 9 damage when biting, and when hitting the target's head with 2 arms
			//And deal 5 damage when hitting left or right for 2 times at maximum
			
			int newdam = targ.DamageMobj (self, self, damage, "Melee");
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}
	
	void A_PlanRoute()
	{
		if(Distance2D(target) > 500)
		{
			A_Chase2(null,null);
		}
	}
	
	Default
	{
		//$Category NPCs
		//$Title "Postal Zombie"
		
		//$Color 4
		//$Sprite TESTA0
		Health 99999999;
		Radius 13;
		Height 65;
		Speed 3;
		PainChance 256;
		Monster;
		SeeSound "";
		AttackSound "";
		PainSound "zombie/pain";
		DeathSound "";
		ActiveSound "";
		Obituary "%o got it's organs eaten out by a Zombie.";
		DropItem "None";
		+NOTARGETSWITCH;
		+SOLID
		+SHOOTABLE
		+DROPOFF
		+PICKUP
		+NOTDMATCH
		-FRIENDLY
		+SLIDESONWALLS
		+CANPASS
		+CANPUSHWALLS
		+FLOORCLIP
		+WINDTHRUST
		+TELESTOMP
		+NOBLOCKMONST
		+SPECIAL
		+FORCEPAIN
		+DOHARMSPECIES
		+HARMFRIENDS
		+QUICKTORETALIATE
		+ALLOWPAIN
		-COUNTKILL
		+NOPAIN
		+INTERPOLATEANGLES
		CameraHeight 59;
	}
	States
	{
	Spawn:
		IDLE A 0
		{
			int Prob = random(0,100);
			if (Prob > 78)
			{
				A_PlaySound("zombie/moan", 0 , 1.0, false, 1, false);
			}
			
			A_ZombieThink();
			
		}
		IDLE ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 A_Look;
		IDL2 A 0 A_ZombieThink();
		IDL2 ABCD 3 A_Look;
		Loop;
	See:
		TNT1 A 0
		{
			int Prob = random(0,100);
			if (Prob > 78)
			{
				A_PlaySound("zombie/curse", 0 , 1.0, false, 1, false);
			}
			
			int prob2 = random(0,100);
			if (prob2 > 85)
			{
				SetStateLabel("Missile");
				return;
			}
			
			int Charge = random(1,100);
			if (Charge > 85)
			{
				SetStateLabel("Charge");
				return;
			}
			
			
			if (WalkingStyle == 1) SetStateLabel("WalkOne");
				else SetStateLabel("WalkTwo");
		}
	See.Plan:
		IDLE A 1 A_Star;
		Loop;
	WalkOne:
		WALK ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 { A_Recoil(-0.25); A_PlanRoute(); }
		WAL2 ABCD 3 { A_Recoil(-0.35); A_PlanRoute(); }
		Goto See;
	WalkTwo:
		W2LK ABCDEFGHIJKLMNOPQRSTUVWXYZ 3 { A_Recoil(-0.25); A_PlanRoute(); }
		W2L2 ABCD 3 { A_Recoil(-0.35); A_PlanRoute(); }
		Goto See;
	Charge:
		CHAR ABCDEFGHIJKLMNOPQRSTUVWXYZ 2
		{
			A_FaceTarget();
			A_Recoil(-1.5);
		}
		IDLE A 0 { vel.xy = (0,0); }
		Goto See;
	Missile:
		SPIT A 0 { vel.xy = (0,0); A_FaceTarget(); A_PlaySound("zombie/barf", 0 , 1.0, false, 1, false); }
		SPIT ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
		SPI2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
		SPI3 ABCDEFGHIJKLMNOP 1;
		Goto See;
	Melee:
		TNT1 A 0
		{	
			A_PlaySound("zombie/anger", 0 , 1.0, false, 1, false);
			
			bool randomm = random(0,1);
			
			if (randomm)
				SetStateLabel("SwipeLeft");
			else
				SetStateLabel("SwipeRight");
		}
	SwipeLeft:
		ATLE A 0 { A_FaceTarget(); vel.xy = (0,0); }
		ATLE ABCDEFGHIJKLMNO 2;
		ATLE P 0 A_ZombieAttack(5);
		ATLE PQRSTUVWXY 2;
		ATLE Z 0 A_ZombieAttack(5);
		ATLE Z 2;
		ATL2 ABCDEFGHIJKLMNOPQRSTU 2;
		Goto See;
	SwipeRight:
		ATRI A 0 { A_FaceTarget(); vel.xy = (0,0); }
		ATRI ABCDEFGHIJKLMNO 2;
		ATRI P 0 A_ZombieAttack(5);
		ATRI PQRSTUVWXY 2;
		ATRI Z 0 A_ZombieAttack(5);
		ATRI Z 2;
		ATR2 ABCDEFGHIJKLMNOPQRSTU 2;
		Goto See;
	Pain:
		IDLE A 3 A_Pain;
		Goto See;
	Death:
		CRAW A 0 A_Scream;
		CRAW A 0 A_NoBlocking;
		CRAW A -1;
		Stop;
	XDeath:
		CRAW A 0 A_Scream;
		CRAW A 0 A_NoBlocking;
		CRAW A -1;
		Stop;
	Raise:
		Stop;
	Unused:
		CRAW ABCDEFGHIJKLMNOPQRSTUVW 7;
		
		CRAS ABCDEFGHIJKLMNOPQRSTUVWXYZ 7;
		CRA2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 7;
		CRA3 ABCDEFGHIJKLMNOPQRS 7;
		
		CRSW ABCDEFGHIJKLMNOPQRSTUVWXYZ 7;
		CRS2 ABCDEFGHIJKLMNOPQ 7;
		
		CRSS ABCDEFGHIJKLMNOPQRSTUVWXYZ 7;
		C2RS ABCDEFGHIJKLMNOPQ 7;
		
		SMAS ABCDEFGHIJKLMNOP 7;
		
	}
}