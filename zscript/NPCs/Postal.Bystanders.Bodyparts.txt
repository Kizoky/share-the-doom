class NPCHead : PostalActor
{	
	Actor Owner;
	
	override void Tick()
	{
		Super.Tick();
		
		let p = NPCCore(Owner);
		if (p)
		{
			SetOrigin(p.pos+(0,0,56), TRUE);
			A_SetAngle(p.angle, SPF_INTERPOLATE);
			A_SetPitch(p.pitch,SPF_INTERPOLATE); 
			
			if (p.bKILLED)
				Destroy();
				
			target = null;
			
		}
		
		if (p is 'NPCKrotchy')
			Destroy();
			
		//Console.Printf("NPCHead Health: %d", self.health);
		//Console.Printf("NPCCore Health: %d", p.health);
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		let p = NPCCore(Owner);
		
		if (source == p && p)
		{
			// no friendly fire
			health += damage;
			return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
		}
		
		if (source != p && p && p.Health > 1)
		{
			//p.MyTarget = source;
			//p.target = source;
			
			// Cop stuff
			let cop = NPCCop(p);
			if (cop && source is 'PostalDude')
			{
				let PlayerDude = PostalDude(source);
				if (PlayerDude)
					PlayerDude.PunishPoints += 0.3;
			}
			
			//If the damage the head will take will result in the health less than 1
			if ((Health - damage) < 1)
			{
				bNoBlood = true;
				
				int dd = p.DamageMobj(inflictor, source, p.Health, mod);
				
				let t = PostalDude(source);
				if (t)
				{
					t.InitLine = true;
					if ((t.Player.ReadyWeapon == Weapon(t.FindInventory("PostShotgun")) || t.Player.ReadyWeapon == Weapon(t.FindInventory("PostSledge"))) && Distance2D(source) < 125)
					{
						A_StartSound("misc/gibbed", CHAN_BODY);
						p.SetStateLabel("Headless.Death");
						SetStateLabel("Headless.Death");
						//Console.Printf("Distance Headshot: %d",Distance2D(source));
					}
				}
				
				let foe = NPCCore(source);
				if (foe)
				{
					if (foe.NPCWeapon ~== "Shotgun"  && Distance2D(source) < 125)
					{
						A_StartSound("misc/gibbed", CHAN_BODY);
						p.SetStateLabel("Headless.Death");
						SetStateLabel("Headless.Death");
					}
				}
			}
			
			if (inflictor is 'Bulletpuff')
			{
				int dd = p.DamageMobj(inflictor, source, damage, mod);
				A_StartSound("hitflesh", CHAN_BODY);
				
				//Console.Printf("Head health: %d", health);
				//Console.Printf("Body health: %d", p.health);
				//Console.Printf("");
				
				return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
			}
			
			if (inflictor is 'ThrownMachete' || inflictor is 'ThrownScythe' || inflictor is 'ThrownHammer')
			{
				int dd = p.DamageMobj(inflictor, source, p.Health, mod);
				A_StartSound("misc/gibbed", CHAN_BODY);
				p.SetStateLabel("Headless.Death");
				SetStateLabel("Headless.Death");
				
				return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
			}
		}
		
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}
	
	Default
	{
		Health 50;
		Radius 15;
		Height 10;
		Speed 0;
		PainChance 256;
		//Monster;
		-SOLID
		+SHOOTABLE
		DropItem "None";
	}
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
		See:
			TNT1 A 1 A_Look;
			Goto Spawn;
		Pain:
			TNT1 A 1;
			Goto Spawn;
		Death:
			TNT1 A 1;
			Stop;
		Headless.Death:
			//Let's start with the HeadExplode sprite first.. Hopefully this is what Postal 2 is using first
			TNT1 A 0 A_SpawnItemEx("Postal_HeadExplode", 0, 0, FRandom(4.0, 6.0));
			TNT1 A 0 A_SpawnItemEx("Postal_HeadExplode", 0, 0, FRandom(4.0, 6.0));
			//Spawn blood particle too to make it feel like the head is crushed
			TNT1 A 0 A_SpawnItemEx("Postal_Blood", 0, 0, FRandom(4.0, 6.0));
			TNT1 A 0 A_SpawnItemEx("Postal_Blood", 0, 0, FRandom(4.0, 6.0));
			
			//Spawn spinning Skull and brain chunks that are slightly bouncing off from the floors, walls, etc..
			TNT1 A 0
			{
				int i = 0;
				while (i < 8) {
					A_SpawnItemEx("Postal_Skullchunk", 0, 0, FRandom(4.0, 6.0), FRandom(0.1, 2.0) * RandomPick(-1, 1), FRandom(0.1, 2.0) * RandomPick(-1, 1), FRandom(0.0, 2.0), 0, SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEANGLE | SXF_ABSOLUTEVELOCITY, 64);
					A_SpawnItemEx("Postal_Brainchunk", FRandom(0.5,1.2), FRandom(0.5,1.2), FRandom(12.0, 15.0), FRandom(0.1, 2.0) * RandomPick(-1, 1), FRandom(0.1, 2.0) * RandomPick(-1, 1), FRandom(0.0, 2.0), 0, SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEANGLE | SXF_ABSOLUTEVELOCITY, 64);
					i++;
				}
			}
			Stop;
		Melee:
			Stop;
		Missile:
			Stop;
 }
}

class NPCArm : PostalActor
{
	bool L;
	
	override void Tick()
	{
		Super.Tick();
		
		let p = NPCCore(master);
		if (master)
		{
			if (L)
				A_Warp(AAPTR_MASTER,0,13,33,0, WARPF_NOCHECKPOSITION);
			else
				A_Warp(AAPTR_MASTER,0,-13,33,0, WARPF_NOCHECKPOSITION);
			
			if (p.bKILLED)
				Destroy();
				
			target = null;
			
		}
		
		if (p is 'NPCKrotchy')
			Destroy();
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		let p = NPCCore(master);
		
		if (source == master)
			return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
		
		if (source != master)
		{
			p.MyTarget = source;
			p.target = source;
		}
		
		Console.Printf("NPCCore health: %d", p.Health);
		
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}
	
	Default
	{
		Radius 13;
		Height 22;
		Health 25;
		-SOLID
		+SHOOTABLE
	
	}
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
		Death:
			TNT1 A 1
			{
				let p = NPCCore(master);
				
				if (!p) return;
				
				p.Hostility = "Pussy";
				p.isAfterTarget = true;
				p.SetStateLabel("PussyChase");
			
			}
			Stop;
	
	}
}

class NPCLeg : NPCHead
{
	bool L;
	
	override void Tick()
	{
		Super.Tick();
		
		let p = NPCCore(master);
		if (master)
		{
			if (L)
				A_Warp(AAPTR_MASTER,0,13,0,0, WARPF_NOCHECKPOSITION);
			else
				A_Warp(AAPTR_MASTER,0,-13,0,0, WARPF_NOCHECKPOSITION);
			
			if (p.bKILLED)
				Destroy();
				
			target = null;
			
		}
		
		if (p is 'NPCKrotchy')
			Destroy();
	}
	
	Default
	{
		Radius 13;
		Height 15;
	
	}
}