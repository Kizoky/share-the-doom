class Plan : Object
{
    array<NavSector> path;
    double givenCost;
    double heuristicCost;
}

class Pathfinder : Actor
{
    NavMesh mesh;
    array<NavSector> path;
    Sector targetSector;

    override void PostBeginPlay()
    {
        mesh = NavMesh(ThinkerIterator.Create("NavMesh").Next());
    }

    // Chase target as long as it's in monster's sector, or monster has up-to-date path to it.
    action void A_Chase2(StateLabel meleeState = 'Melee', StateLabel rangedState = 'Missile',
                         StateLabel planState = 'See.Plan')
    {
        if (!target)
            return;

        // So Thing_SetGoal doesn't get in the way.
        if (target == goal)
            goal = null;

        Actor chaseTarget = null;
        int pathSize = invoker.path.Size();
        if (pathSize == 0 || invoker.targetSector != target.floorSector) // No up-to-date plan
        {
            SetStateLabel(planState);
            return;
        }
        else if (pathSize == 1) // We've reached target sector
        {
            chaseTarget = target;
        }
        else
        {
            if (goal && Distance2d(goal) < radius)  // Get rid of waypoint when reached
            {
                goal.Destroy();
                goal = null;
            }

            if (!goal)  // Create new waypoint, if needed
            {
                // Find link (line) b/w current sector, and next sector
                NavSector ns1 = invoker.path[invoker.path.Size()-1];
                NavSector ns2 = invoker.path[invoker.path.Size()-2];
                NavLink link;
                for (int i = 0; i < ns1.links.Size(); ++i)
                {
                    if (ns1.links[i].to == ns2)
                    {
                        link = ns1.links[i];
                        break;
                    }
                }

                // Go to link's midpoint
                vector3 nextPoint;
                nextPoint.x = link.midpoint.x;
                nextPoint.y = link.midpoint.y;
                nextPoint.z = GetZAt(nextPoint.x, nextPoint.y, 0,
                                     GZF_ABSOLUTEPOS | GZF_ABSOLUTEANG);

                goal = Spawn("PatrolPoint", nextPoint);

                invoker.path.Pop();

                // DEBUG
                //console.Printf("(ZScript:Pathfinder) Now heading to %d", ns2.mapSector.Index());
            }

            chaseTarget = goal;
        }

        // Possibly attack target
        if (target.bShootable && isHostile(target))
        {
            A_Chase(meleeState, rangedState, CHF_DONTMOVE);
        }

        // Find a direction to move
        // I realize I could use A_Chase for this, but actors spin around whenever they hit a new
        // sector, moving north-south. I assume that's a bug.
        int oldDir = moveDir;
        moveDir = (8 * AngleTo(chaseTarget, true) / 360) % 8;
        if (!TryWalk())
        {
            moveDir = oldDir;
            if(!TryWalk())
            {
                for (int i = 1; i <= 4; ++i)
                {
                    moveDir = (oldDir + i) % 8;
                    if (TryWalk())
                        break;

                    moveDir = (oldDir - i) % 8;
                    if (TryWalk())
                        break;
                }
            }
        }

        // Face movement direction
        angle = 360 * moveDir / 8;
        if (angle > 180)
            angle -= 360;
    }

    // Create plan to reach target, or wait if target is unreachable
    action void A_Star(StateLabel meleeState = 'Melee', StateLabel rangedState = 'Missile',
                       StateLabel seeState = 'See')
    {
        if (invoker.mesh.navSectors.Size() == 0)
            return;

        if (!target)
            return;

        // So Thing_SetGoal doesn't get in the way.
        if (target == goal)
            goal = null;

        if (target.floorSector != invoker.targetSector) // Target has moved to different sector
        {
            //console.Printf("(ZScript:Pathfinder) Planning path..."); // DEBUG

            // Get rid of old plan
            if (goal)
            {
                goal.Destroy();
                goal = null;
            }
            invoker.path.Clear();

            // Get sectors invoker & target are in
            NavSector startSector = invoker.mesh.navSectors[floorSector.Index()];
            NavSector targetSector = invoker.mesh.navSectors[target.floorSector.Index()];

            // Save target location, so we don't repeat the search immediately
            invoker.targetSector = target.floorSector;

            // Find shortest path b/w them w/ A* search

            // Fringe contains partial plans under consideration
            // In spite of appearances, it's actually a binary min-heap
            // This means that the plan w/ the shortest path is always first
            // It also means that adding/removing elements is complex (see below)
            array<Plan> fringe;

            // Initial plan
            fringe.Push(New('Plan'));
            fringe[0].path.Push(startSector);
            fringe[0].givenCost = 0;
            fringe[0].heuristicCost = Distance2d(target);   // Distance is a decent heuristic

            // Until we run out of ideas
            while (fringe.Size() > 0)
            {
                // Remove best partial plan from fringe
                Plan currentPlan = fringe[0];

                // Pop from heap
                {
                    // Replace root node w/ right-most leaf node
                    fringe[0] = fringe[fringe.Size()-1];
                    fringe.Pop();

                    // Let new root node trickle down until its cost is <= both its children's
                    int index = 0;
                    int childIndex1 = 1;
                    int childIndex2 = 2;

                    while (fringe.Size() > childIndex1) // Until new node is at bottom of heap
                    {
                        double cost = fringe[index].givenCost + fringe[index].heuristicCost;
                        double childCost1 = fringe[childIndex1].givenCost
                                          + fringe[childIndex1].heuristicCost;

                        // Find out which is cheapest: the node, or one of its children
                        int minIndex = index;

                        if (fringe.Size() > childIndex2)
                        {
                            double childCost2 = fringe[childIndex2].givenCost
                                              + fringe[childIndex2].heuristicCost;

                            if (childCost2 < childCost1 && childCost2 < cost)
                            {
                                minIndex = childIndex2;
                            }
                            else if (childCost1 < cost)
                            {
                                minIndex = childIndex1;
                            }
                        }
                        else if (childCost1 < cost)
                        {
                            minIndex = childIndex1;
                        }

                        // Swap node w/ child, if needed
                        if (index != minIndex)
                        {
                            Plan temp = fringe[index];
                            fringe[index] = fringe[minIndex];
                            fringe[minIndex] = temp;

                            index = minIndex;
                            childIndex1 = 2 * index + 1;
                            childIndex2 = childIndex1 + 1;
                        }
                        else
                        {
                            break;
                        }
                    }
                }

                // If plan reaches goal, we're done
                NavSector lastSector = currentPlan.path[currentPlan.path.Size()-1];
                if (lastSector == targetSector)
                {
                    //console.Printf("(ZScript:Pathfinder) Path found!"); // DEBUG

                    // Clear closed set
                    for (int i = 0; i < invoker.mesh.navSectors.Size(); ++i)
                    {
                        invoker.mesh.navSectors[i].closed = false;
                    }

                    // Invoker.path is a stack, so sectors go into it in reverse order
                    for (int i = currentPlan.path.Size() - 1; i >= 0; --i)
                    {
                        invoker.path.Push(currentPlan.path[i]);
                    }

                    SetStateLabel(seeState);
                    return;
                }

                // Put last sector in closed set, so we don't check it again
                lastSector.closed = true;

                // Add plans w/ one more sector to fringe
                for (int i = 0; i < lastSector.links.Size(); ++i)
                {
                    NavLink link = lastSector.links[i];
                    NavSector nextSector = link.to;

                    // Don't add sectors in closed set
                    if (nextSector.closed)
                        continue;

                    // Don't add sector if too high/low to climb/fall
                    if (link.deltaZ < -maxDropOffHeight || link.deltaZ > maxStepHeight)
                        continue;

                    // Don't add sector if line to it blocks monsters
                    if (link.blockMonsters)
                        continue;

                    // Don't add sector if ceiling too low, unless it's a door
                    if (link.height < height && !link.door)
                        continue;

                    int index = fringe.Size();
                    fringe.Push(New('Plan'));

                    fringe[index].path.Copy(currentPlan.path);
                    fringe[index].path.Push(nextSector);

                    fringe[index].givenCost = currentPlan.givenCost + link.distance;

                    // There doesn't seem to be a built-in point-to-point distance function
                    {
                        double deltaX = target.pos.x - nextSector.center.x;
                        double deltaY = target.pos.y - nextSector.center.y;

                        fringe[index].heuristicCost += Sqrt(deltaX * deltaX + deltaY * deltaY);
                    }

                    // Heap insertion
                    // Let new node bubble up until its cost is >= its parent's
                    while (index > 0)
                    {
                        int parentIndex = (index - 1) / 2;

                        double cost = fringe[index].givenCost + fringe[index].heuristicCost;
                        double parentCost = fringe[parentIndex].givenCost
                                          + fringe[parentIndex].heuristicCost;

                        // Swap node w/ parent, if needed
                        if (parentCost > cost)
                        {
                            Plan temp = fringe[index];
                            fringe[index] = fringe[parentIndex];
                            fringe[parentIndex] = temp;

                            index = parentIndex;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }

            //console.Printf("(ZScript:Pathfinder) No path found!");  // DEBUG

            // Clear closed set
            for (int i = 0; i < invoker.mesh.navSectors.Size(); ++i)
            {
                invoker.mesh.navSectors[i].closed = false;
            }
        }

        // Possibly attack target
        if (target.bShootable && isHostile(target))
        {
            A_Chase(meleeState, rangedState, CHF_DONTMOVE);
        }
    }
}